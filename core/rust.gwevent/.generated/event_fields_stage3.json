{
  "normalized_event_fields": {
    "AutoModActionExecution": {
      "execution": [
        "ActionExecution"
      ]
    },
    "AutoModRuleCreate": {
      "rule": [
        "Rule"
      ]
    },
    "AutoModRuleDelete": {
      "rule": [
        "Rule"
      ]
    },
    "AutoModRuleUpdate": {
      "rule": [
        "Rule"
      ]
    },
    "CategoryCreate": {
      "category": [
        "GuildChannel"
      ]
    },
    "CategoryDelete": {
      "category": [
        "GuildChannel"
      ]
    },
    "ChannelCreate": {
      "channel": [
        "GuildChannel"
      ]
    },
    "ChannelDelete": {
      "channel": [
        "GuildChannel"
      ],
      "messages": [
        "Option",
        "Vec",
        "Message"
      ]
    },
    "ChannelPinsUpdate": {
      "channel_id": [
        "ChannelId"
      ],
      "guild_id": [
        "Option",
        "GuildId"
      ],
      "last_pin_timestamp": [
        "Option",
        "Timestamp"
      ]
    },
    "ChannelUpdate": {
      "new": [
        "GuildChannel"
      ],
      "old": [
        "Option",
        "GuildChannel"
      ]
    },
    "CommandPermissionsUpdate": {
      "permission": [
        "CommandPermissions"
      ]
    },
    "EntitlementCreate": {
      "entitlement": [
        "Entitlement"
      ]
    },
    "EntitlementDelete": {
      "entitlement": [
        "Entitlement"
      ]
    },
    "EntitlementUpdate": {
      "entitlement": [
        "Entitlement"
      ]
    },
    "GuildAuditLogEntryCreate": {
      "entry": [
        "AuditLogEntry"
      ],
      "guild_id": [
        "GuildId"
      ]
    },
    "GuildBanAddition": {
      "banned_user": [
        "User"
      ],
      "guild_id": [
        "GuildId"
      ]
    },
    "GuildBanRemoval": {
      "guild_id": [
        "GuildId"
      ],
      "unbanned_user": [
        "User"
      ]
    },
    "GuildCreate": {
      "guild": [
        "Guild"
      ],
      "is_new": [
        "Option",
        "bool"
      ]
    },
    "GuildDelete": {
      "guild": [
        "Option",
        "Guild"
      ],
      "guild_id": [
        "GuildId"
      ],
      "is_full_available": [
        "bool"
      ]
    },
    "GuildEmojisUpdate": {
      "emojis": [
        "Vec",
        "Emoji"
      ],
      "guild_id": [
        "GuildId"
      ]
    },
    "GuildIntegrationsUpdate": {
      "guild_id": [
        "GuildId"
      ]
    },
    "GuildMemberAddition": {
      "new_member": [
        "Member"
      ]
    },
    "GuildMemberRemoval": {
      "guild_id": [
        "GuildId"
      ],
      "member_data_if_available": [
        "Option",
        "Member"
      ],
      "user": [
        "User"
      ]
    },
    "GuildMemberUpdate": {
      "avatar": [
        "Option",
        "ImageHash"
      ],
      "communication_disabled_until": [
        "Option",
        "Timestamp"
      ],
      "deaf": [
        "bool"
      ],
      "guild_id": [
        "GuildId"
      ],
      "joined_at": [
        "Timestamp"
      ],
      "mute": [
        "bool"
      ],
      "new": [
        "Option",
        "Member"
      ],
      "nick": [
        "Option",
        "String"
      ],
      "old": [
        "Option",
        "Member"
      ],
      "pending": [
        "bool"
      ],
      "premium_since": [
        "Option",
        "Timestamp"
      ],
      "roles": [
        "RoleId"
      ],
      "unusual_dm_activity_until": [
        "Option",
        "Timestamp"
      ],
      "user": [
        "User"
      ]
    },
    "GuildMembersChunk": {
      "chunk": [
        "GuildMembersChunkEvent"
      ]
    },
    "GuildRoleCreate": {
      "role": [
        "Role"
      ]
    },
    "GuildRoleDelete": {
      "guild_id": [
        "GuildId"
      ],
      "removed_role_id": [
        "RoleId"
      ],
      "role": [
        "Option",
        "Role"
      ]
    },
    "GuildRoleUpdate": {
      "new": [
        "Role"
      ],
      "old": [
        "Option",
        "Role"
      ]
    },
    "GuildScheduledEventCreate": {
      "event": [
        "ScheduledEvent"
      ]
    },
    "GuildScheduledEventDelete": {
      "event": [
        "ScheduledEvent"
      ]
    },
    "GuildScheduledEventUpdate": {
      "event": [
        "ScheduledEvent"
      ]
    },
    "GuildScheduledEventUserAdd": {
      "guild_id": [
        "GuildId"
      ],
      "scheduled_event_id": [
        "ScheduledEventId"
      ],
      "user_id": [
        "UserId"
      ]
    },
    "GuildScheduledEventUserRemove": {
      "guild_id": [
        "GuildId"
      ],
      "scheduled_event_id": [
        "ScheduledEventId"
      ],
      "user_id": [
        "UserId"
      ]
    },
    "GuildStickersUpdate": {
      "guild_id": [
        "GuildId"
      ],
      "stickers": [
        "Vec",
        "Sticker"
      ]
    },
    "GuildUpdate": {
      "new": [
        "PartialGuild"
      ],
      "old": [
        "Option",
        "Guild"
      ]
    },
    "IntegrationCreate": {
      "integration": [
        "Integration"
      ]
    },
    "IntegrationDelete": {
      "application_id": [
        "Option",
        "ApplicationId"
      ],
      "guild_id": [
        "GuildId"
      ],
      "integration_id": [
        "IntegrationId"
      ]
    },
    "IntegrationUpdate": {
      "integration": [
        "Integration"
      ]
    },
    "InteractionCreate": {
      "interaction": [
        "Interaction"
      ]
    },
    "InviteCreate": {
      "channel_id": [
        "ChannelId"
      ],
      "code": [
        "String"
      ],
      "created_at": [
        "Timestamp"
      ],
      "guild_id": [
        "Option",
        "GuildId"
      ],
      "inviter": [
        "Option",
        "User"
      ],
      "max_age": [
        "u32"
      ],
      "max_uses": [
        "u8"
      ],
      "target_application": [
        "Option",
        "Value"
      ],
      "target_type": [
        "Option",
        "InviteTargetType"
      ],
      "target_user": [
        "Option",
        "User"
      ],
      "temporary": [
        "bool"
      ],
      "uses": [
        "u64"
      ]
    },
    "InviteDelete": {
      "channel_id": [
        "ChannelId"
      ],
      "code": [
        "String"
      ],
      "guild_id": [
        "Option",
        "GuildId"
      ]
    },
    "Message": {
      "new_message": [
        "Message"
      ]
    },
    "MessageDelete": {
      "channel_id": [
        "ChannelId"
      ],
      "deleted_message_id": [
        "MessageId"
      ],
      "guild_id": [
        "Option",
        "GuildId"
      ]
    },
    "MessageDeleteBulk": {
      "channel_id": [
        "ChannelId"
      ],
      "guild_id": [
        "Option",
        "GuildId"
      ],
      "message_ids": [
        "Vec",
        "MessageId"
      ]
    },
    "MessageUpdate": {
      "activity": [
        "Option",
        "MessageActivity"
      ],
      "application": [
        "Option",
        "MessageApplication"
      ],
      "application_id": [
        "Option",
        "ApplicationId"
      ],
      "attachments": [
        "Option",
        "Attachment"
      ],
      "author": [
        "Option",
        "User"
      ],
      "channel_id": [
        "ChannelId"
      ],
      "components": [
        "Option",
        "ActionRow"
      ],
      "content": [
        "Option",
        "String"
      ],
      "edited_timestamp": [
        "Option",
        "Timestamp"
      ],
      "embeds": [
        "Option",
        "Embed"
      ],
      "flags": [
        "Option",
        "MessageFlags"
      ],
      "guild_id": [
        "Option",
        "GuildId"
      ],
      "id": [
        "MessageId"
      ],
      "interaction": [
        "Option",
        "MessageInteraction"
      ],
      "kind": [
        "Option",
        "MessageType"
      ],
      "member": [
        "Option",
        "PartialMember"
      ],
      "mention_channels": [
        "Option",
        "ChannelMention"
      ],
      "mention_everyone": [
        "Option",
        "bool"
      ],
      "mention_roles": [
        "Option",
        "RoleId"
      ],
      "mentions": [
        "Option",
        "User"
      ],
      "message_reference": [
        "Option",
        "MessageReference"
      ],
      "new": [
        "Option",
        "Message"
      ],
      "old": [
        "Option",
        "Message"
      ],
      "pinned": [
        "Option",
        "bool"
      ],
      "position": [
        "Option",
        "u64"
      ],
      "reactions": [
        "Option",
        "MessageReaction"
      ],
      "referenced_message": [
        "Option",
        "Message"
      ],
      "role_subscription_data": [
        "Option",
        "RoleSubscriptionData"
      ],
      "sticker_items": [
        "Option",
        "StickerItem"
      ],
      "thread": [
        "Option",
        "GuildChannel"
      ],
      "timestamp": [
        "Option",
        "Timestamp"
      ],
      "tts": [
        "Option",
        "bool"
      ],
      "webhook_id": [
        "Option",
        "WebhookId"
      ]
    },
    "StageInstanceCreate": {
      "stage_instance": [
        "StageInstance"
      ]
    },
    "StageInstanceDelete": {
      "stage_instance": [
        "StageInstance"
      ]
    },
    "StageInstanceUpdate": {
      "stage_instance": [
        "StageInstance"
      ]
    },
    "ThreadCreate": {
      "thread": [
        "GuildChannel"
      ]
    },
    "ThreadDelete": {
      "full_thread_data": [
        "Option",
        "GuildChannel"
      ],
      "thread": [
        "PartialGuildChannel"
      ]
    },
    "ThreadListSync": {
      "channel_ids": [
        "Option",
        "Vec",
        "ChannelId"
      ],
      "guild_id": [
        "GuildId"
      ],
      "members": [
        "ThreadMember"
      ],
      "threads": [
        "GuildChannel"
      ]
    },
    "ThreadMemberUpdate": {
      "thread_member": [
        "ThreadMember"
      ]
    },
    "ThreadMembersUpdate": {
      "added_members": [
        "ThreadMember"
      ],
      "guild_id": [
        "GuildId"
      ],
      "id": [
        "ChannelId"
      ],
      "member_count": [
        "i16"
      ],
      "removed_member_ids": [
        "UserId"
      ]
    },
    "ThreadUpdate": {
      "new": [
        "GuildChannel"
      ],
      "old": [
        "Option",
        "GuildChannel"
      ]
    },
    "WebhookUpdate": {
      "belongs_to_channel_id": [
        "ChannelId"
      ],
      "guild_id": [
        "GuildId"
      ]
    }
  },
  "resolved_refs": {
    "Action": {
      "description": "Determines the action that was done on a target.\n\n[Discord docs](https://discord.com/developers/docs/resources/audit-log#audit-log-entry-object-audit-log-events).",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "Action"
    },
    "ActionExecution": {
      "description": "Gateway event payload sent when a rule is triggered and an action is executed (e.g. message is\nblocked).\n\n[Discord docs](https://discord.com/developers/docs/topics/gateway-events#auto-moderation-action-execution).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "ID of the guild in which the action was executed.",
              "name": "guild_id",
              "normalized_type": [
                "GuildId"
              ]
            },
            {
              "description": "Action which was executed.",
              "name": "action",
              "normalized_type": [
                "Action"
              ]
            },
            {
              "description": "ID of the rule which action belongs to.",
              "name": "rule_id",
              "normalized_type": [
                "RuleId"
              ]
            },
            {
              "description": "Trigger type of rule which was triggered.",
              "name": "rule_trigger_type",
              "normalized_type": [
                "TriggerType"
              ]
            },
            {
              "description": "ID of the user which generated the content which triggered the rule.",
              "name": "user_id",
              "normalized_type": [
                "UserId"
              ]
            },
            {
              "description": "ID of the channel in which user content was posted.",
              "name": "channel_id",
              "normalized_type": [
                "Option",
                "ChannelId"
              ]
            },
            {
              "description": "ID of any user message which content belongs to.\n\nWill be `None` if message was blocked by automod or content was not part of any message.",
              "name": "message_id",
              "normalized_type": [
                "Option",
                "MessageId"
              ]
            },
            {
              "description": "ID of any system auto moderation messages posted as a result of this action.\n\nWill be `None` if this event does not correspond to an action with type [`Action::Alert`].",
              "name": "alert_system_message_id",
              "normalized_type": [
                "Option",
                "MessageId"
              ]
            },
            {
              "description": "User generated text content.\n\nRequires [`GatewayIntents::MESSAGE_CONTENT`] to receive non-empty values.\n\n[`GatewayIntents::MESSAGE_CONTENT`]: crate::model::gateway::GatewayIntents::MESSAGE_CONTENT",
              "name": "content",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "Word or phrase configured in the rule that triggered the rule.",
              "name": "matched_keyword",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "Substring in content that triggered the rule.\n\nRequires [`GatewayIntents::MESSAGE_CONTENT`] to receive non-empty values.\n\n[`GatewayIntents::MESSAGE_CONTENT`]: crate::model::gateway::GatewayIntents::MESSAGE_CONTENT",
              "name": "matched_content",
              "normalized_type": [
                "Option",
                "String"
              ]
            }
          ]
        }
      },
      "name": "ActionExecution"
    },
    "ActionRow": {
      "description": "An action row.\n\n[Discord docs](https://discord.com/developers/docs/interactions/message-components#action-rows).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "Always [`ComponentType::ActionRow`]",
              "name": "type",
              "normalized_type": [
                "ComponentType"
              ]
            },
            {
              "description": "The components of this ActionRow.",
              "name": "components",
              "normalized_type": [
                "ActionRowComponent"
              ]
            }
          ]
        }
      },
      "name": "ActionRow"
    },
    "ActionRowComponent": {
      "description": "A component which can be inside of an [`ActionRow`].\n\n[Discord docs](https://discord.com/developers/docs/interactions/message-components#component-object-component-types).",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "ActionRowComponent"
    },
    "Activity": {
      "description": "Representation of an activity that a [`User`] is performing.\n\n[Discord docs](https://discord.com/developers/docs/topics/gateway-events#activity-object-activity-structure).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "The ID of the application for the activity.",
              "name": "application_id",
              "normalized_type": [
                "Option",
                "ApplicationId"
              ]
            },
            {
              "description": "Images for the presence and their texts.",
              "name": "assets",
              "normalized_type": [
                "Option",
                "ActivityAssets"
              ]
            },
            {
              "description": "What the user is doing.",
              "name": "details",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "Activity flags describing what the payload includes.",
              "name": "flags",
              "normalized_type": [
                "Option",
                "ActivityFlags"
              ]
            },
            {
              "description": "Whether or not the activity is an instanced game session.",
              "name": "instance",
              "normalized_type": [
                "Option",
                "bool"
              ]
            },
            {
              "description": "The type of activity being performed",
              "name": "type",
              "normalized_type": [
                "ActivityType"
              ]
            },
            {
              "description": "The name of the activity.",
              "name": "name",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "Information about the user's current party.",
              "name": "party",
              "normalized_type": [
                "Option",
                "ActivityParty"
              ]
            },
            {
              "description": "Secrets for Rich Presence joining and spectating.",
              "name": "secrets",
              "normalized_type": [
                "Option",
                "ActivitySecrets"
              ]
            },
            {
              "description": "The user's current party status.",
              "name": "state",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "Emoji currently used in custom status",
              "name": "emoji",
              "normalized_type": [
                "Option",
                "ActivityEmoji"
              ]
            },
            {
              "description": "Unix timestamps for the start and/or end times of the activity.",
              "name": "timestamps",
              "normalized_type": [
                "Option",
                "ActivityTimestamps"
              ]
            },
            {
              "description": "The sync ID of the activity. Mainly used by the Spotify activity type which uses this\nparameter to store the track ID.",
              "name": "sync_id",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "The session ID of the activity. Reserved for specific activity types, such as the Activity\nthat is transmitted when a user is listening to Spotify.",
              "name": "session_id",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "The Stream URL if [`Self::kind`] is [`ActivityType::Streaming`].",
              "name": "url",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "The buttons of this activity.\n\n**Note**: There can only be up to 2 buttons.",
              "name": "buttons",
              "normalized_type": [
                "ActivityButton"
              ]
            },
            {
              "description": "Unix timestamp (in milliseconds) of when the activity was added to the user's session",
              "name": "created_at",
              "normalized_type": [
                "u64"
              ]
            }
          ]
        }
      },
      "name": "Activity"
    },
    "ActivityAssets": {
      "description": "The assets for an activity.\n\n[Discord docs](https://discord.com/developers/docs/topics/gateway#activity-object-activity-assets).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "The ID for a large asset of the activity, usually a snowflake.",
              "name": "large_image",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "Text displayed when hovering over the large image of the activity.",
              "name": "large_text",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "The ID for a small asset of the activity, usually a snowflake.",
              "name": "small_image",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "Text displayed when hovering over the small image of the activity.",
              "name": "small_text",
              "normalized_type": [
                "Option",
                "String"
              ]
            }
          ]
        }
      },
      "name": "ActivityAssets"
    },
    "ActivityButton": {
      "description": "[Discord docs](https://discord.com/developers/docs/topics/gateway#activity-object-activity-buttons).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "The text shown on the button.",
              "name": "label",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "The url opened when clicking the button.\n\n**Note**: Bots cannot access activity button URL.",
              "name": "url",
              "normalized_type": [
                "String"
              ]
            }
          ]
        }
      },
      "name": "ActivityButton"
    },
    "ActivityEmoji": {
      "description": "Representation of an emoji used in a custom status\n\n[Discord docs](https://discord.com/developers/docs/topics/gateway-events#activity-object-activity-emoji).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "The name of the emoji.",
              "name": "name",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "The id of the emoji.",
              "name": "id",
              "normalized_type": [
                "Option",
                "EmojiId"
              ]
            },
            {
              "description": "Whether this emoji is animated.",
              "name": "animated",
              "normalized_type": [
                "Option",
                "bool"
              ]
            }
          ]
        }
      },
      "name": "ActivityEmoji"
    },
    "ActivityFlags": {
      "description": "A set of flags defining what is in an activity's payload.\n\n[Discord docs](https://discord.com/developers/docs/topics/gateway#activity-object-activity-flags).",
      "fields": {
        "BitFlag": {
          "typ": "u64 ",
          "values": [
            {
              "description": "Whether the activity party is in a voice channel.",
              "name": "INSTANCE",
              "value": "1 << 0"
            },
            {
              "description": "Whether the activity party is friend only.",
              "name": "JOIN",
              "value": "1 << 1"
            },
            {
              "description": "Whether the activity can be played.",
              "name": "SPECTATE",
              "value": "1 << 2"
            },
            {
              "description": "Whether the activity can be synced.",
              "name": "JOIN_REQUEST",
              "value": "1 << 3"
            },
            {
              "description": "Whether a request can be sent to join the user's party.",
              "name": "SYNC",
              "value": "1 << 4"
            },
            {
              "description": "Whether the activity can be spectated.",
              "name": "PLAY",
              "value": "1 << 5"
            },
            {
              "description": "Whether the activity is joinable.",
              "name": "PARTY_PRIVACY_FRIENDS",
              "value": "1 << 6"
            },
            {
              "description": "Whether the activity is an instance activity.",
              "name": "PARTY_PRIVACY_VOICE_CHANNEL",
              "value": "1 << 7"
            },
            {
              "description": "",
              "name": "EMBEDDED",
              "value": "1 << 8"
            }
          ]
        }
      },
      "name": "ActivityFlags"
    },
    "ActivityParty": {
      "description": "Information about an activity's party.\n\n[Discord docs](https://discord.com/developers/docs/game-sdk/activities#data-models-activityparty-struct).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "The ID of the party.",
              "name": "id",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "Used to show the party's current and maximum size.",
              "name": "size",
              "normalized_type": [
                "Option",
                "Vec",
                "u32"
              ]
            }
          ]
        }
      },
      "name": "ActivityParty"
    },
    "ActivitySecrets": {
      "description": "Secrets for an activity.\n\n[Discord docs](https://discord.com/developers/docs/topics/gateway#activity-object-activity-secrets).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "The secret for joining a party.",
              "name": "join",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "The secret for a specific instanced match.",
              "name": "match",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "The secret for spectating an activity.",
              "name": "spectate",
              "normalized_type": [
                "Option",
                "String"
              ]
            }
          ]
        }
      },
      "name": "ActivitySecrets"
    },
    "ActivityTimestamps": {
      "description": "Timestamps of when a user started and/or is ending their activity.\n\n[Discord docs](https://discord.com/developers/docs/game-sdk/activities#data-models-activitytimestamps-struct).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "",
              "name": "end",
              "normalized_type": [
                "Option",
                "u64"
              ]
            },
            {
              "description": "",
              "name": "start",
              "normalized_type": [
                "Option",
                "u64"
              ]
            }
          ]
        }
      },
      "name": "ActivityTimestamps"
    },
    "ActivityType": {
      "description": "[Discord docs](https://discord.com/developers/docs/topics/gateway-events#activity-object-activity-types).",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "ActivityType"
    },
    "AfkMetadata": {
      "description": "",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "Id of a voice channel that's considered the AFK channel.",
              "name": "afk_channel_id",
              "normalized_type": [
                "ChannelId"
              ]
            },
            {
              "description": "The amount of seconds a user can not show any activity in a voice channel before being\nmoved to an AFK channel -- if one exists.",
              "name": "afk_timeout",
              "normalized_type": [
                "AfkTimeout"
              ]
            }
          ]
        }
      },
      "name": "AfkMetadata"
    },
    "AfkTimeout": {
      "description": "The [`Guild`] AFK timeout length.\n\nSee [AfkMetadata::afk_timeout].",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "AfkTimeout"
    },
    "ApplicationId": {
      "description": "An identifier for an Application.",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "ApplicationId"
    },
    "Attachment": {
      "description": "A file uploaded with a message. Not to be confused with [`Embed`]s.\n\n[Discord docs](https://discord.com/developers/docs/resources/channel#attachment-object).\n\n[`Embed`]: super::Embed",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "The unique ID given to this attachment.",
              "name": "id",
              "normalized_type": [
                "AttachmentId"
              ]
            },
            {
              "description": "The filename of the file that was uploaded. This is equivalent to what the uploader had\ntheir file named.",
              "name": "filename",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "Sescription for the file (max 1024 characters).",
              "name": "description",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "If the attachment is an image, then the height of the image is provided.",
              "name": "height",
              "normalized_type": [
                "Option",
                "u32"
              ]
            },
            {
              "description": "If the attachment is an image, then the width of the image is provided.",
              "name": "width",
              "normalized_type": [
                "Option",
                "u32"
              ]
            },
            {
              "description": "The proxy URL.",
              "name": "proxy_url",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "The size of the file in bytes.",
              "name": "size",
              "normalized_type": [
                "u32"
              ]
            },
            {
              "description": "The URL of the uploaded attachment.",
              "name": "url",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "The attachment's [media type].\n\n[media type]: https://en.wikipedia.org/wiki/Media_type",
              "name": "content_type",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "Whether this attachment is ephemeral.\n\nEphemeral attachments will automatically be removed after a set period of time.\n\nEphemeral attachments on messages are guaranteed to be available as long as the message\nitself exists.",
              "name": "ephemeral",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "The duration of the audio file (present if [`MessageFlags::IS_VOICE_MESSAGE`]).",
              "name": "duration_secs",
              "normalized_type": [
                "Option",
                "f64"
              ]
            },
            {
              "description": "List of bytes representing a sampled waveform (present if\n[`MessageFlags::IS_VOICE_MESSAGE`]).\n\nThe waveform is intended to be a preview of the entire voice message, with 1 byte per\ndatapoint. Clients sample the recording at most once per 100 milliseconds, but will\ndownsample so that no more than 256 datapoints are in the waveform.\n\nThe waveform details are a Discord implementation detail and may change without warning or\ndocumentation.",
              "name": "waveform",
              "normalized_type": [
                "Option",
                "Vec",
                "u8"
              ]
            }
          ]
        }
      },
      "name": "Attachment"
    },
    "AttachmentId": {
      "description": "An identifier for an attachment.",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "AttachmentId"
    },
    "AuditLogEntry": {
      "description": "[Discord docs](https://discord.com/developers/docs/resources/audit-log#audit-log-entry-object).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "Determines to what entity an [`Self::action`] was used on.",
              "name": "target_id",
              "normalized_type": [
                "Option",
                "GenericId"
              ]
            },
            {
              "description": "Determines what action was done on a [`Self::target_id`]",
              "name": "action_type",
              "normalized_type": [
                "Action"
              ]
            },
            {
              "description": "What was the reasoning by doing an action on a target? If there was one.",
              "name": "reason",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "The user that did this action on a target.",
              "name": "user_id",
              "normalized_type": [
                "Option",
                "UserId"
              ]
            },
            {
              "description": "What changes were made.",
              "name": "changes",
              "normalized_type": [
                "Vec",
                "Change"
              ]
            },
            {
              "description": "The id of this entry.",
              "name": "id",
              "normalized_type": [
                "AuditLogEntryId"
              ]
            },
            {
              "description": "Some optional data associated with this entry.",
              "name": "options",
              "normalized_type": [
                "Option",
                "Options"
              ]
            }
          ]
        }
      },
      "name": "AuditLogEntry"
    },
    "AuditLogEntryId": {
      "description": "An identifier for an audit log entry.",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "AuditLogEntryId"
    },
    "AutoArchiveDuration": {
      "description": "See [`ThreadMetadata::auto_archive_duration`].\n\n[Discord docs](https://discord.com/developers/docs/resources/channel#thread-metadata-object)",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "AutoArchiveDuration"
    },
    "Change": {
      "description": "",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "Change"
    },
    "ChannelFlags": {
      "description": "Describes extra features of the channel.\n\n[Discord docs](https://discord.com/developers/docs/resources/channel#channel-object-channel-flags).",
      "fields": {
        "BitFlag": {
          "typ": "u64 ",
          "values": [
            {
              "description": "",
              "name": "PINNED",
              "value": "1 << 1"
            },
            {
              "description": "",
              "name": "REQUIRE_TAG",
              "value": "1 << 4"
            }
          ]
        }
      },
      "name": "ChannelFlags"
    },
    "ChannelId": {
      "description": "An identifier for a Channel",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "ChannelId"
    },
    "ChannelMention": {
      "description": "[Discord docs](https://discord.com/developers/docs/resources/channel#channel-mention-object).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "ID of the channel.",
              "name": "id",
              "normalized_type": [
                "ChannelId"
              ]
            },
            {
              "description": "ID of the guild containing the channel.",
              "name": "guild_id",
              "normalized_type": [
                "GuildId"
              ]
            },
            {
              "description": "The kind of channel",
              "name": "type",
              "normalized_type": [
                "ChannelType"
              ]
            },
            {
              "description": "The name of the channel",
              "name": "name",
              "normalized_type": [
                "String"
              ]
            }
          ]
        }
      },
      "name": "ChannelMention"
    },
    "ChannelType": {
      "description": "A representation of a type of channel.\n\n[Discord docs](https://discord.com/developers/docs/resources/channel#channel-object-channel-types).",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "ChannelType"
    },
    "ClientStatus": {
      "description": "Information detailing the current active status of a [`User`].\n\n[Discord docs](https://discord.com/developers/docs/topics/gateway#client-status-object).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "",
              "name": "desktop",
              "normalized_type": [
                "Option",
                "OnlineStatus"
              ]
            },
            {
              "description": "",
              "name": "mobile",
              "normalized_type": [
                "Option",
                "OnlineStatus"
              ]
            },
            {
              "description": "",
              "name": "web",
              "normalized_type": [
                "Option",
                "OnlineStatus"
              ]
            }
          ]
        }
      },
      "name": "ClientStatus"
    },
    "Colour": {
      "description": "A utility struct to help with working with the basic representation of a colour. This is\nparticularly useful when working with a [`Role`]'s colour, as the API works with an integer\nvalue instead of an RGB value.\n\nInstances can be created by using the struct's associated functions. These produce presets\nequivalent to those found in the official client's colour picker.\n\n# Examples\n\nPassing in a role's colour, and then retrieving its green component via [`Self::g`]:\n\n```rust\n# use serde_json::{json, from_value};\n# use serenity::model::guild::Role;\n# use serenity::model::id::RoleId;\n# use serenity::model::id::GuildId;\n# use serenity::model::permissions;\n#\n# fn main() {\n# let role = from_value::<Role>(json!({\n#     \"color\": Colour::BLURPLE,\n#     \"hoist\": false,\n#     \"id\": RoleId::new(1),\n#     \"guild_id\": GuildId::new(2),\n#     \"managed\": false,\n#     \"mentionable\": false,\n#     \"name\": \"test\",\n#     \"permissions\": permissions::PRESET_GENERAL,\n#     \"position\": 7,\n# })).unwrap();\n#\nuse serenity::model::Colour;\n\n// assuming a `role` has already been bound\n\nlet green = role.colour.g();\n\nprintln!(\"The green component is: {}\", green);\n# }\n```\n\nCreating an instance with the [`Self::DARK_TEAL`] preset:\n\n```rust\nuse serenity::model::Colour;\n\nlet colour = Colour::DARK_TEAL;\n\nassert_eq!(colour.tuple(), (17, 128, 106));\n```\n\nColours can also be directly compared for equivalence:\n\n```rust\nuse serenity::model::Colour;\n\nlet blitz_blue = Colour::BLITZ_BLUE;\nlet fooyoo = Colour::FOOYOO;\nlet fooyoo2 = Colour::FOOYOO;\nassert!(blitz_blue != fooyoo);\nassert_eq!(fooyoo, fooyoo2);\nassert!(blitz_blue > fooyoo);\n```\n\n[`Role`]: crate::model::guild::Role",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "Colour"
    },
    "CommandId": {
      "description": "An identifier for a slash command.",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "CommandId"
    },
    "CommandPermission": {
      "description": "The [`CommandPermission`] data.\n\n[Discord docs](https://discord.com/developers/docs/interactions/application-commands#application-command-permissions-object-application-command-permissions-structure).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "The [`RoleId`] or [`UserId`], depends on `kind` value.",
              "name": "id",
              "normalized_type": [
                "CommandPermissionId"
              ]
            },
            {
              "description": "The type of data this permissions applies to.",
              "name": "type",
              "normalized_type": [
                "CommandPermissionType"
              ]
            },
            {
              "description": "Whether or not the provided data can use the command or not.",
              "name": "permission",
              "normalized_type": [
                "bool"
              ]
            }
          ]
        }
      },
      "name": "CommandPermission"
    },
    "CommandPermissionId": {
      "description": "An identifier for a slash command permission Id. Can contain\na [`RoleId`] or [`UserId`].",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "CommandPermissionId"
    },
    "CommandPermissionType": {
      "description": "The type of a [`CommandPermission`].\n\n[Discord docs](https://discord.com/developers/docs/interactions/application-commands#application-command-permissions-object-application-command-permission-type).",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "CommandPermissionType"
    },
    "CommandPermissions": {
      "description": "An [`Command`] permission.\n\n[Discord docs](https://discord.com/developers/docs/interactions/application-commands#application-command-permissions-object-guild-application-command-permissions-structure).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "The id of the command.",
              "name": "id",
              "normalized_type": [
                "CommandId"
              ]
            },
            {
              "description": "The id of the application the command belongs to.",
              "name": "application_id",
              "normalized_type": [
                "ApplicationId"
              ]
            },
            {
              "description": "The id of the guild.",
              "name": "guild_id",
              "normalized_type": [
                "GuildId"
              ]
            },
            {
              "description": "The permissions for the command in the guild.",
              "name": "permissions",
              "normalized_type": [
                "CommandPermission"
              ]
            }
          ]
        }
      },
      "name": "CommandPermissions"
    },
    "ComponentType": {
      "description": "The type of a component",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "ComponentType"
    },
    "DefaultMessageNotificationLevel": {
      "description": "Default message notification level for a guild.\n\n[Discord docs](https://discord.com/developers/docs/resources/guild#guild-object-default-message-notification-level).",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "DefaultMessageNotificationLevel"
    },
    "Embed": {
      "description": "Represents a rich embed which allows using richer markdown, multiple fields and more. This was\nheavily inspired by [slack's attachments].\n\nYou can include an attachment in your own message by a user or a bot, or in a webhook.\n\n**Note**: Maximum amount of characters you can put is 256 in a field name,\n1024 in a field value, and 4096 in a description.\n\n[Discord docs](https://discord.com/developers/docs/resources/channel#embed-object).\n\n[slack's attachments]: https://api.slack.com/docs/message-attachments",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "The title of the embed.",
              "name": "title",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "The type of the embed. For embeds not generated by Discord's backend, this will always be\n\"rich\".",
              "name": "type",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "The description of the embed.\n\nThe maximum value for this field is 2048 unicode codepoints.",
              "name": "description",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "The URL of the embed.",
              "name": "url",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "Timestamp information.",
              "name": "timestamp",
              "normalized_type": [
                "Option",
                "Timestamp"
              ]
            },
            {
              "description": "The colour code of the embed.",
              "name": "color",
              "normalized_type": [
                "Option",
                "Colour"
              ]
            },
            {
              "description": "Footer information for the embed.",
              "name": "footer",
              "normalized_type": [
                "Option",
                "EmbedFooter"
              ]
            },
            {
              "description": "Image information of the embed.",
              "name": "image",
              "normalized_type": [
                "Option",
                "EmbedImage"
              ]
            },
            {
              "description": "Thumbnail information of the embed.",
              "name": "thumbnail",
              "normalized_type": [
                "Option",
                "EmbedThumbnail"
              ]
            },
            {
              "description": "The embed's video information.\n\nThis is present if the [`Self::kind`] is `\"video\"`.",
              "name": "video",
              "normalized_type": [
                "Option",
                "EmbedVideo"
              ]
            },
            {
              "description": "Provider information for the embed.\n\nFor example, if the embed [`Self::kind`] is `\"video\"`, the provider might contain\ninformation about YouTube.",
              "name": "provider",
              "normalized_type": [
                "Option",
                "EmbedProvider"
              ]
            },
            {
              "description": "Information about the author of the embed.",
              "name": "author",
              "normalized_type": [
                "Option",
                "EmbedAuthor"
              ]
            },
            {
              "description": "The array of fields.\n\nThe maximum number of fields is 25.",
              "name": "fields",
              "normalized_type": [
                "Option",
                "EmbedField",
                "u8"
              ]
            }
          ]
        }
      },
      "name": "Embed"
    },
    "EmbedAuthor": {
      "description": "An author object in an embed.\n\n[Discord docs](https://discord.com/developers/docs/resources/channel#embed-object-embed-author-structure).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "The name of the author.",
              "name": "name",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "The URL of the author.",
              "name": "url",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "The URL of the author icon.\n\nThis only supports HTTP(S) and attachments.",
              "name": "icon_url",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "A proxied URL of the author icon.",
              "name": "proxy_icon_url",
              "normalized_type": [
                "Option",
                "String"
              ]
            }
          ]
        }
      },
      "name": "EmbedAuthor"
    },
    "EmbedField": {
      "description": "A field object in an embed.\n\n[Discord docs](https://discord.com/developers/docs/resources/channel#embed-object-embed-field-structure).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "The name of the field.\n\nThe maximum length of this field is 512 unicode codepoints.",
              "name": "name",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "The value of the field.\n\nThe maximum length of this field is 1024 unicode codepoints.",
              "name": "value",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "Indicator of whether the field should display as inline.",
              "name": "inline",
              "normalized_type": [
                "bool"
              ]
            }
          ]
        }
      },
      "name": "EmbedField"
    },
    "EmbedFooter": {
      "description": "Footer information for an embed.\n\n[Discord docs](https://discord.com/developers/docs/resources/channel#embed-object-embed-footer-structure).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "The associated text with the footer.",
              "name": "text",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "The URL of the footer icon.\n\nThis only supports HTTP(S) and attachments.",
              "name": "icon_url",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "A proxied URL of the footer icon.",
              "name": "proxy_icon_url",
              "normalized_type": [
                "Option",
                "String"
              ]
            }
          ]
        }
      },
      "name": "EmbedFooter"
    },
    "EmbedImage": {
      "description": "An image object in an embed.\n\n[Discord docs](https://discord.com/developers/docs/resources/channel#embed-object-embed-image-structure).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "Source URL of the image.\n\nThis only supports HTTP(S) and attachments.",
              "name": "url",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "A proxied URL of the image.",
              "name": "proxy_url",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "The height of the image.",
              "name": "height",
              "normalized_type": [
                "Option",
                "u32"
              ]
            },
            {
              "description": "The width of the image.",
              "name": "width",
              "normalized_type": [
                "Option",
                "u32"
              ]
            }
          ]
        }
      },
      "name": "EmbedImage"
    },
    "EmbedProvider": {
      "description": "The provider of an embed.\n\n[Discord docs](https://discord.com/developers/docs/resources/channel#embed-object-embed-provider-structure).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "The name of the provider.",
              "name": "name",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "The URL of the provider.",
              "name": "url",
              "normalized_type": [
                "Option",
                "String"
              ]
            }
          ]
        }
      },
      "name": "EmbedProvider"
    },
    "EmbedThumbnail": {
      "description": "The dimensions and URL of an embed thumbnail.\n\n[Discord docs](https://discord.com/developers/docs/resources/channel#embed-object-embed-thumbnail-structure).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "The source URL of the thumbnail.\n\nThis only supports HTTP(S) and attachments.",
              "name": "url",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "A proxied URL of the thumbnail.",
              "name": "proxy_url",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "The height of the thumbnail in pixels.",
              "name": "height",
              "normalized_type": [
                "Option",
                "u32"
              ]
            },
            {
              "description": "The width of the thumbnail in pixels.",
              "name": "width",
              "normalized_type": [
                "Option",
                "u32"
              ]
            }
          ]
        }
      },
      "name": "EmbedThumbnail"
    },
    "EmbedVideo": {
      "description": "Video information for an embed.\n\n[Discord docs](https://discord.com/developers/docs/resources/channel#embed-object-embed-video-structure).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "The source URL of the video.",
              "name": "url",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "A proxied URL of the thumbnail.",
              "name": "proxy_url",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "The height of the video in pixels.",
              "name": "height",
              "normalized_type": [
                "Option",
                "u32"
              ]
            },
            {
              "description": "The width of the video in pixels.",
              "name": "width",
              "normalized_type": [
                "Option",
                "u32"
              ]
            }
          ]
        }
      },
      "name": "EmbedVideo"
    },
    "Emoji": {
      "description": "Represents a custom guild emoji, which can either be created using the API, or via an\nintegration. Emojis created using the API only work within the guild it was created in.\n\n[Discord docs](https://discord.com/developers/docs/resources/emoji#emoji-object).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "Whether the emoji is animated.",
              "name": "animated",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "Whether the emoji can be used. This may be false when the guild loses boosts, reducing the\nemoji limit.",
              "name": "available",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "The Id of the emoji.",
              "name": "id",
              "normalized_type": [
                "EmojiId"
              ]
            },
            {
              "description": "The name of the emoji. It must be at least 2 characters long and can only contain\nalphanumeric characters and underscores.",
              "name": "name",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "Whether the emoji is managed via an [`Integration`] service.\n\n[`Integration`]: super::Integration",
              "name": "managed",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "Whether the emoji name needs to be surrounded by colons in order to be used by the client.",
              "name": "require_colons",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "A list of [`Role`]s that are allowed to use the emoji. If there are no roles specified,\nthen usage is unrestricted.\n\n[`Role`]: super::Role",
              "name": "roles",
              "normalized_type": [
                "RoleId"
              ]
            },
            {
              "description": "The user who created the emoji.",
              "name": "user",
              "normalized_type": [
                "Option",
                "User"
              ]
            }
          ]
        }
      },
      "name": "Emoji"
    },
    "EmojiId": {
      "description": "An identifier for an Emoji",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "EmojiId"
    },
    "Entitlement": {
      "description": "Represents that a user or guild has access to a premium offering in the application.\n\n[Discord docs](https://discord.com/developers/docs/monetization/entitlements#entitlement-object-entitlement-structure).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "The ID of the entitlement.",
              "name": "id",
              "normalized_type": [
                "EntitlementId"
              ]
            },
            {
              "description": "The ID of the corresponding SKU.",
              "name": "sku_id",
              "normalized_type": [
                "SkuId"
              ]
            },
            {
              "description": "The ID of the parent application.",
              "name": "application_id",
              "normalized_type": [
                "ApplicationId"
              ]
            },
            {
              "description": "The ID of the user that is granted access to the SKU.",
              "name": "user_id",
              "normalized_type": [
                "Option",
                "UserId"
              ]
            },
            {
              "description": "The type of the entitlement.",
              "name": "type",
              "normalized_type": [
                "EntitlementKind"
              ]
            },
            {
              "description": "Whether the entitlement has been deleted or not. Entitlements are not deleted when they\nexpire.",
              "name": "deleted",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "Start date after which the entitlement is valid. Not present when using test entitlements.",
              "name": "starts_at",
              "normalized_type": [
                "Option",
                "Timestamp"
              ]
            },
            {
              "description": "End date after which the entitlement is no longer valid. Not present when using test\nentitlements.",
              "name": "ends_at",
              "normalized_type": [
                "Option",
                "Timestamp"
              ]
            },
            {
              "description": "The ID of the guild that is granted access to the SKU.",
              "name": "guild_id",
              "normalized_type": [
                "Option",
                "GuildId"
              ]
            }
          ]
        }
      },
      "name": "Entitlement"
    },
    "EntitlementId": {
      "description": "An identifier for an entitlement.",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "EntitlementId"
    },
    "EntitlementKind": {
      "description": "Differentiates between Entitlement types.\n\n[Discord docs](https://discord.com/developers/docs/monetization/entitlements#entitlement-object-entitlement-types).",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "EntitlementKind"
    },
    "EventType": {
      "description": "Indicates in what event context a rule should be checked.\n\n[Discord docs](https://discord.com/developers/docs/resources/auto-moderation#auto-moderation-rule-object-event-types).",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "EventType"
    },
    "ExplicitContentFilter": {
      "description": "Setting used to filter explicit messages from members.\n\n[Discord docs](https://discord.com/developers/docs/resources/guild#guild-object-explicit-content-filter-level).",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "ExplicitContentFilter"
    },
    "ForumEmoji": {
      "description": "An object that specifies the emoji to use for Forum related emoji parameters.\n\nSee [Discord](https://discord.com/developers/docs/resources/channel#default-reaction-object)\n[docs]()",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "ForumEmoji"
    },
    "ForumLayoutType": {
      "description": "See [`GuildChannel::default_forum_layout`].\n\n[Discord docs](https://discord.com/developers/docs/resources/channel#channel-object-forum-layout-types).",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "ForumLayoutType"
    },
    "ForumTag": {
      "description": "An object that represents a tag able to be applied to a thread in a `GUILD_FORUM` channel.\n\nSee [Discord docs](https://discord.com/developers/docs/resources/channel#forum-tag-object)",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "The id of the tag.",
              "name": "id",
              "normalized_type": [
                "ForumTagId"
              ]
            },
            {
              "description": "The name of the tag (0-20 characters).",
              "name": "name",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "Whether this tag can only be added to or removed from threads by a member with the\nMANAGE_THREADS permission.",
              "name": "moderated",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "The emoji to display next to the tag.",
              "name": "emoji",
              "normalized_type": [
                "Option",
                "ForumEmoji"
              ]
            }
          ]
        }
      },
      "name": "ForumTag"
    },
    "ForumTagId": {
      "description": "An identifier for a forum tag.",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "ForumTagId"
    },
    "GenericId": {
      "description": "An identifier for an unspecific entity.",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "GenericId"
    },
    "Guild": {
      "description": "Information about a Discord guild, such as channels, emojis, etc.\n\n[Discord docs](https://discord.com/developers/docs/resources/guild#guild-object) plus\n[extension](https://discord.com/developers/docs/topics/gateway-events#guild-create).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "The unique Id identifying the guild.\n\nThis is equivalent to the Id of the default role (`@everyone`).",
              "name": "id",
              "normalized_type": [
                "GuildId"
              ]
            },
            {
              "description": "The name of the guild.",
              "name": "name",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "The hash of the icon used by the guild.\n\nIn the client, this appears on the guild list on the left-hand side.",
              "name": "icon",
              "normalized_type": [
                "Option",
                "ImageHash"
              ]
            },
            {
              "description": "Icon hash, returned when in the template object",
              "name": "icon_hash",
              "normalized_type": [
                "Option",
                "ImageHash"
              ]
            },
            {
              "description": "An identifying hash of the guild's splash icon.\n\nIf the `InviteSplash` feature is enabled, this can be used to generate a URL to a splash\nimage.",
              "name": "splash",
              "normalized_type": [
                "Option",
                "ImageHash"
              ]
            },
            {
              "description": "An identifying hash of the guild discovery's splash icon.\n\n**Note**: Only present for guilds with the `DISCOVERABLE` feature.",
              "name": "discovery_splash",
              "normalized_type": [
                "Option",
                "ImageHash"
              ]
            },
            {
              "description": "The Id of the [`User`] who owns the guild.",
              "name": "owner_id",
              "normalized_type": [
                "UserId"
              ]
            },
            {
              "description": "Information about the voice afk channel.",
              "name": "afk_metadata",
              "normalized_type": [
                "Option",
                "AfkMetadata"
              ]
            },
            {
              "description": "Whether or not the guild widget is enabled.",
              "name": "widget_enabled",
              "normalized_type": [
                "Option",
                "bool"
              ]
            },
            {
              "description": "The channel id that the widget will generate an invite to, or null if set to no invite",
              "name": "widget_channel_id",
              "normalized_type": [
                "Option",
                "ChannelId"
              ]
            },
            {
              "description": "Indicator of the current verification level of the guild.",
              "name": "verification_level",
              "normalized_type": [
                "VerificationLevel"
              ]
            },
            {
              "description": "Indicator of whether notifications for all messages are enabled by\ndefault in the guild.",
              "name": "default_message_notifications",
              "normalized_type": [
                "DefaultMessageNotificationLevel"
              ]
            },
            {
              "description": "Default explicit content filter level.",
              "name": "explicit_content_filter",
              "normalized_type": [
                "ExplicitContentFilter"
              ]
            },
            {
              "description": "A mapping of the guild's roles.",
              "name": "roles",
              "normalized_type": [
                "HashMap",
                "RoleId",
                "Role"
              ]
            },
            {
              "description": "All of the guild's custom emojis.",
              "name": "emojis",
              "normalized_type": [
                "HashMap",
                "EmojiId",
                "Emoji"
              ]
            },
            {
              "description": "The guild features. More information available at [`discord documentation`].\n\nThe following is a list of known features:\n- `ANIMATED_ICON`\n- `BANNER`\n- `COMMERCE`\n- `COMMUNITY`\n- `DISCOVERABLE`\n- `FEATURABLE`\n- `INVITE_SPLASH`\n- `MEMBER_VERIFICATION_GATE_ENABLED`\n- `MONETIZATION_ENABLED`\n- `MORE_STICKERS`\n- `NEWS`\n- `PARTNERED`\n- `PREVIEW_ENABLED`\n- `PRIVATE_THREADS`\n- `ROLE_ICONS`\n- `SEVEN_DAY_THREAD_ARCHIVE`\n- `THREE_DAY_THREAD_ARCHIVE`\n- `TICKETED_EVENTS_ENABLED`\n- `VANITY_URL`\n- `VERIFIED`\n- `VIP_REGIONS`\n- `WELCOME_SCREEN_ENABLED`\n- `THREE_DAY_THREAD_ARCHIVE`\n- `SEVEN_DAY_THREAD_ARCHIVE`\n- `PRIVATE_THREADS`\n\n\n[`discord documentation`]: https://discord.com/developers/docs/resources/guild#guild-object-guild-features",
              "name": "features",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "Indicator of whether the guild requires multi-factor authentication for [`Role`]s or\n[`User`]s with moderation permissions.",
              "name": "mfa_level",
              "normalized_type": [
                "MfaLevel"
              ]
            },
            {
              "description": "Application ID of the guild creator if it is bot-created.",
              "name": "application_id",
              "normalized_type": [
                "Option",
                "ApplicationId"
              ]
            },
            {
              "description": "The ID of the channel to which system messages are sent.",
              "name": "system_channel_id",
              "normalized_type": [
                "Option",
                "ChannelId"
              ]
            },
            {
              "description": "System channel flags.",
              "name": "system_channel_flags",
              "normalized_type": [
                "SystemChannelFlags"
              ]
            },
            {
              "description": "The id of the channel where rules and/or guidelines are displayed.\n\n**Note**: Only available on `COMMUNITY` guild, see [`Self::features`].",
              "name": "rules_channel_id",
              "normalized_type": [
                "Option",
                "ChannelId"
              ]
            },
            {
              "description": "The maximum number of presences for the guild. The default value is currently 25000.\n\n**Note**: It is in effect when it is `None`.",
              "name": "max_presences",
              "normalized_type": [
                "Option",
                "u64"
              ]
            },
            {
              "description": "The maximum number of members for the guild.",
              "name": "max_members",
              "normalized_type": [
                "Option",
                "u64"
              ]
            },
            {
              "description": "The vanity url code for the guild, if it has one.",
              "name": "vanity_url_code",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "The server's description, if it has one.",
              "name": "description",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "The guild's banner, if it has one.",
              "name": "banner",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "The server's premium boosting level.",
              "name": "premium_tier",
              "normalized_type": [
                "PremiumTier"
              ]
            },
            {
              "description": "The total number of users currently boosting this server.",
              "name": "premium_subscription_count",
              "normalized_type": [
                "Option",
                "u64"
              ]
            },
            {
              "description": "The preferred locale of this guild only set if guild has the \"DISCOVERABLE\" feature,\ndefaults to en-US.",
              "name": "preferred_locale",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "The id of the channel where admins and moderators of Community guilds receive notices from\nDiscord.\n\n**Note**: Only available on `COMMUNITY` guild, see [`Self::features`].",
              "name": "public_updates_channel_id",
              "normalized_type": [
                "Option",
                "ChannelId"
              ]
            },
            {
              "description": "The maximum amount of users in a video channel.",
              "name": "max_video_channel_users",
              "normalized_type": [
                "Option",
                "u64"
              ]
            },
            {
              "description": "The maximum amount of users in a stage video channel",
              "name": "max_stage_video_channel_users",
              "normalized_type": [
                "Option",
                "u64"
              ]
            },
            {
              "description": "Approximate number of members in this guild.",
              "name": "approximate_member_count",
              "normalized_type": [
                "Option",
                "u64"
              ]
            },
            {
              "description": "Approximate number of non-offline members in this guild.",
              "name": "approximate_presence_count",
              "normalized_type": [
                "Option",
                "u64"
              ]
            },
            {
              "description": "The welcome screen of the guild.\n\n**Note**: Only available on `COMMUNITY` guild, see [`Self::features`].",
              "name": "welcome_screen",
              "normalized_type": [
                "Option",
                "GuildWelcomeScreen"
              ]
            },
            {
              "description": "The guild NSFW state. See [`discord support article`].\n\n[`discord support article`]: https://support.discord.com/hc/en-us/articles/1500005389362-NSFW-Server-Designation",
              "name": "nsfw_level",
              "normalized_type": [
                "NsfwLevel"
              ]
            },
            {
              "description": "All of the guild's custom stickers.",
              "name": "stickers",
              "normalized_type": [
                "HashMap",
                "StickerId",
                "Sticker"
              ]
            },
            {
              "description": "Whether the guild has the boost progress bar enabled",
              "name": "premium_progress_bar_enabled",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "The date that the current user joined the guild.",
              "name": "joined_at",
              "normalized_type": [
                "Timestamp"
              ]
            },
            {
              "description": "Indicator of whether the guild is considered \"large\" by Discord.",
              "name": "large",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "Whether this guild is unavailable due to an outage.",
              "name": "unavailable",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "The number of members in the guild.",
              "name": "member_count",
              "normalized_type": [
                "u64"
              ]
            },
            {
              "description": "A mapping of [`User`]s to their current voice state.",
              "name": "voice_states",
              "normalized_type": [
                "HashMap",
                "UserId",
                "VoiceState"
              ]
            },
            {
              "description": "Users who are members of the guild.\n\nMembers might not all be available when the [`ReadyEvent`] is received if the\n[`Self::member_count`] is greater than the [`LARGE_THRESHOLD`] set by the library.",
              "name": "members",
              "normalized_type": [
                "HashMap",
                "UserId",
                "Member"
              ]
            },
            {
              "description": "All voice and text channels contained within a guild.\n\nThis contains all channels regardless of permissions (i.e. the ability of the bot to read\nfrom or connect to them).",
              "name": "channels",
              "normalized_type": [
                "HashMap",
                "ChannelId",
                "GuildChannel"
              ]
            },
            {
              "description": "All active threads in this guild that current user has permission to view.",
              "name": "threads",
              "normalized_type": [
                "GuildChannel"
              ]
            },
            {
              "description": "A mapping of [`User`]s' Ids to their current presences.\n\n**Note**: This will be empty unless the \"guild presences\" privileged intent is enabled.",
              "name": "presences",
              "normalized_type": [
                "HashMap",
                "UserId",
                "Presence"
              ]
            },
            {
              "description": "The stage instances in this guild.",
              "name": "stage_instances",
              "normalized_type": [
                "StageInstance"
              ]
            },
            {
              "description": "The stage instances in this guild.",
              "name": "guild_scheduled_events",
              "normalized_type": [
                "ScheduledEvent"
              ]
            }
          ]
        }
      },
      "name": "Guild"
    },
    "GuildChannel": {
      "description": "Represents a guild's text, news, or voice channel. Some methods are available only for voice\nchannels and some are only available for text channels. News channels are a subset of text\nchannels and lack slow mode hence [`Self::rate_limit_per_user`] will be [`None`].\n\n[Discord docs](https://discord.com/developers/docs/resources/channel#channel-object).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "The unique Id of the channel.",
              "name": "id",
              "normalized_type": [
                "ChannelId"
              ]
            },
            {
              "description": "The bitrate of the channel.\n\n**Note**: This is only available for voice and stage channels.",
              "name": "bitrate",
              "normalized_type": [
                "Option",
                "u32"
              ]
            },
            {
              "description": "The Id of the parent category for a channel, or of the parent text channel for a thread.\n\n**Note**: This is only available for channels in a category and thread channels.",
              "name": "parent_id",
              "normalized_type": [
                "Option",
                "ChannelId"
              ]
            },
            {
              "description": "The Id of the guild the channel is located in.\n\nThe original voice channel has an Id equal to the guild's Id, incremented by one.\n\n[`id`]: GuildChannel::id",
              "name": "guild_id",
              "normalized_type": [
                "GuildId"
              ]
            },
            {
              "description": "The type of the channel.",
              "name": "type",
              "normalized_type": [
                "ChannelType"
              ]
            },
            {
              "description": "The Id of the user who created this channel\n\n**Note**: This is only available for threads and forum posts",
              "name": "owner_id",
              "normalized_type": [
                "Option",
                "UserId"
              ]
            },
            {
              "description": "The Id of the last message sent in the channel.\n\n**Note**: This is only available for text channels.",
              "name": "last_message_id",
              "normalized_type": [
                "Option",
                "MessageId"
              ]
            },
            {
              "description": "The timestamp of the time a pin was most recently made.\n\n**Note**: This is only available for text channels.",
              "name": "last_pin_timestamp",
              "normalized_type": [
                "Option",
                "Timestamp"
              ]
            },
            {
              "description": "The name of the channel. (1-100 characters)",
              "name": "name",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "Permission overwrites for [`Member`]s and for [`Role`]s.",
              "name": "permission_overwrites",
              "normalized_type": [
                "PermissionOverwrite"
              ]
            },
            {
              "description": "The position of the channel.\n\nThe default text channel will _almost always_ have a position of `0`.",
              "name": "position",
              "normalized_type": [
                "u16"
              ]
            },
            {
              "description": "The topic of the channel.\n\n**Note**: This is only available for text, forum and stage channels.",
              "name": "topic",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "The maximum number of members allowed in the channel.\n\nThis is max 99 for voice channels and 10,000 for stage channels (0 refers to no limit).",
              "name": "user_limit",
              "normalized_type": [
                "Option",
                "u16"
              ]
            },
            {
              "description": "Used to tell if the channel is not safe for work.",
              "name": "nsfw",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "A rate limit that applies per user and excludes bots.\n\n**Note**: This is only available for text channels excluding news channels.",
              "name": "rate_limit_per_user",
              "normalized_type": [
                "Option",
                "u16"
              ]
            },
            {
              "description": "The region override.\n\n**Note**: This is only available for voice and stage channels. [`None`] for voice and stage\nchannels means automatic region selection.",
              "name": "rtc_region",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "The video quality mode for a voice channel.",
              "name": "video_quality_mode",
              "normalized_type": [
                "Option",
                "VideoQualityMode"
              ]
            },
            {
              "description": "An approximate count of messages in the thread.\n\n**Note**: This is only available on thread channels.",
              "name": "message_count",
              "normalized_type": [
                "Option",
                "u32"
              ]
            },
            {
              "description": "An approximate count of users in a thread, stops counting at 50.\n\n**Note**: This is only available on thread channels.",
              "name": "member_count",
              "normalized_type": [
                "Option",
                "u8"
              ]
            },
            {
              "description": "The thread metadata.\n\n**Note**: This is only available on thread channels.",
              "name": "thread_metadata",
              "normalized_type": [
                "Option",
                "ThreadMetadata"
              ]
            },
            {
              "description": "Thread member object for the current user, if they have joined the thread, only included on\ncertain API endpoints.",
              "name": "member",
              "normalized_type": [
                "Option",
                "PartialThreadMember"
              ]
            },
            {
              "description": "Default duration for newly created threads, in minutes, to automatically archive the thread\nafter recent activity.",
              "name": "default_auto_archive_duration",
              "normalized_type": [
                "Option",
                "AutoArchiveDuration"
              ]
            },
            {
              "description": "Computed permissions for the invoking user in the channel, including overwrites.\n\nOnly included inside [`CommandDataResolved`].",
              "name": "permissions",
              "normalized_type": [
                "Option",
                "Permissions"
              ]
            },
            {
              "description": "Extra information about the channel\n\n**Note**: This is only available in forum channels.",
              "name": "flags",
              "normalized_type": [
                "ChannelFlags"
              ]
            },
            {
              "description": "The number of messages ever sent in a thread, it's similar to `message_count` on message\ncreation, but will not decrement the number when a message is deleted.",
              "name": "total_message_sent",
              "normalized_type": [
                "Option",
                "u32"
              ]
            },
            {
              "description": "The set of available tags.\n\n**Note**: This is only available in forum channels.",
              "name": "available_tags",
              "normalized_type": [
                "ForumTag"
              ]
            },
            {
              "description": "The set of applied tags.\n\n**Note**: This is only available in a thread in a forum.",
              "name": "applied_tags",
              "normalized_type": [
                "ForumTagId"
              ]
            },
            {
              "description": "The emoji to show in the add reaction button\n\n**Note**: This is only available in a forum.",
              "name": "default_reaction_emoji",
              "normalized_type": [
                "Option",
                "ForumEmoji"
              ]
            },
            {
              "description": "The initial `rate_limit_per_user` to set on newly created threads in a channel. This field\nis copied to the thread at creation time and does not live update.\n\n**Note**: This is only available in a forum or text channel.",
              "name": "default_thread_rate_limit_per_user",
              "normalized_type": [
                "Option",
                "u16"
              ]
            },
            {
              "description": "The status of a voice channel.\n\n**Note**: This is only available in voice channels.",
              "name": "status",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "The default sort order type used to order posts\n\n**Note**: This is only available in a forum.",
              "name": "default_sort_order",
              "normalized_type": [
                "Option",
                "SortOrder"
              ]
            },
            {
              "description": "The default forum layout view used to display posts in a forum. Defaults to 0, which\nindicates a layout view has not been set by a channel admin.\n\n**Note**: This is only available in a forum.",
              "name": "default_forum_layout",
              "normalized_type": [
                "Option",
                "ForumLayoutType"
              ]
            }
          ]
        }
      },
      "name": "GuildChannel"
    },
    "GuildId": {
      "description": "An identifier for a Guild",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "GuildId"
    },
    "GuildMemberFlags": {
      "description": "Flags for a guild member.\n\n[Discord docs](https://discord.com/developers/docs/resources/guild#guild-member-object-guild-member-flags).",
      "fields": {
        "BitFlag": {
          "typ": "u32 ",
          "values": [
            {
              "description": "Member is exempt from guild verification requirements. Editable",
              "name": "DID_REJOIN",
              "value": "1 << 0"
            },
            {
              "description": "Member has completed onboarding. Not editable",
              "name": "COMPLETED_ONBOARDING",
              "value": "1 << 1"
            },
            {
              "description": "Member has left and rejoined the guild. Not editable",
              "name": "BYPASSES_VERIFICATION",
              "value": "1 << 2"
            },
            {
              "description": "",
              "name": "STARTED_ONBOARDING",
              "value": "1 << 3"
            }
          ]
        }
      },
      "name": "GuildMemberFlags"
    },
    "GuildMembersChunkEvent": {
      "description": "Requires no gateway intents.\n\n[Discord docs](https://discord.com/developers/docs/topics/gateway-events#guild-members-chunk).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "ID of the guild.",
              "name": "guild_id",
              "normalized_type": [
                "GuildId"
              ]
            },
            {
              "description": "Set of guild members.",
              "name": "members",
              "normalized_type": [
                "HashMap",
                "UserId",
                "Member"
              ]
            },
            {
              "description": "Chunk index in the expected chunks for this response (0 <= chunk_index < chunk_count).",
              "name": "chunk_index",
              "normalized_type": [
                "u32"
              ]
            },
            {
              "description": "Total number of expected chunks for this response.",
              "name": "chunk_count",
              "normalized_type": [
                "u32"
              ]
            },
            {
              "description": "When passing an invalid ID to [`crate::gateway::ShardRunnerMessage::ChunkGuild`], it will\nbe returned here.",
              "name": "not_found",
              "normalized_type": [
                "GenericId"
              ]
            },
            {
              "description": "When passing true to [`crate::gateway::ShardRunnerMessage::ChunkGuild`], presences of the\nreturned members will be here.",
              "name": "presences",
              "normalized_type": [
                "Option",
                "Vec",
                "Presence"
              ]
            },
            {
              "description": "Nonce used in the [`crate::gateway::ShardRunnerMessage::ChunkGuild`] request.",
              "name": "nonce",
              "normalized_type": [
                "Option",
                "String"
              ]
            }
          ]
        }
      },
      "name": "GuildMembersChunkEvent"
    },
    "GuildWelcomeChannel": {
      "description": "A channel shown in the [`GuildWelcomeScreen`].\n\n[Discord docs](https://discord.com/developers/docs/resources/guild#welcome-screen-object-welcome-screen-channel-structure).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "The channel Id.",
              "name": "channel_id",
              "normalized_type": [
                "ChannelId"
              ]
            },
            {
              "description": "The description shown for the channel.",
              "name": "description",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "The emoji shown, if there is one.",
              "name": "emoji",
              "normalized_type": [
                "Option",
                "GuildWelcomeChannelEmoji"
              ]
            }
          ]
        }
      },
      "name": "GuildWelcomeChannel"
    },
    "GuildWelcomeChannelEmoji": {
      "description": "A [`GuildWelcomeScreen`] emoji.\n\n[Discord docs](https://discord.com/developers/docs/resources/guild#welcome-screen-object-welcome-screen-channel-structure).",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "GuildWelcomeChannelEmoji"
    },
    "GuildWelcomeScreen": {
      "description": "Information relating to a guild's welcome screen.\n\n[Discord docs](https://discord.com/developers/docs/resources/guild#welcome-screen-object).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "The server description shown in the welcome screen.",
              "name": "description",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "The channels shown in the welcome screen.\n\n**Note**: There can only be only up to 5 channels.",
              "name": "welcome_channels",
              "normalized_type": [
                "GuildWelcomeChannel"
              ]
            }
          ]
        }
      },
      "name": "GuildWelcomeScreen"
    },
    "ImageHash": {
      "description": "",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "ImageHash"
    },
    "Integration": {
      "description": "Various information about integrations.\n\n[Discord docs](https://discord.com/developers/docs/resources/guild#integration-object),\n[extra fields 1](https://discord.com/developers/docs/topics/gateway-events#integration-create),\n[extra fields 2](https://discord.com/developers/docs/topics/gateway-events#integration-update),",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "",
              "name": "id",
              "normalized_type": [
                "IntegrationId"
              ]
            },
            {
              "description": "",
              "name": "name",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "",
              "name": "type",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "",
              "name": "enabled",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "",
              "name": "syncing",
              "normalized_type": [
                "Option",
                "bool"
              ]
            },
            {
              "description": "",
              "name": "role_id",
              "normalized_type": [
                "Option",
                "RoleId"
              ]
            },
            {
              "description": "",
              "name": "enable_emoticons",
              "normalized_type": [
                "Option",
                "bool"
              ]
            },
            {
              "description": "",
              "name": "expire_behavior",
              "normalized_type": [
                "Option",
                "IntegrationExpireBehaviour"
              ]
            },
            {
              "description": "",
              "name": "expire_grace_period",
              "normalized_type": [
                "Option",
                "u32"
              ]
            },
            {
              "description": "",
              "name": "user",
              "normalized_type": [
                "Option",
                "User"
              ]
            },
            {
              "description": "",
              "name": "account",
              "normalized_type": [
                "IntegrationAccount"
              ]
            },
            {
              "description": "",
              "name": "synced_at",
              "normalized_type": [
                "Option",
                "Timestamp"
              ]
            },
            {
              "description": "",
              "name": "subscriber_count",
              "normalized_type": [
                "Option",
                "u64"
              ]
            },
            {
              "description": "",
              "name": "revoked",
              "normalized_type": [
                "Option",
                "bool"
              ]
            },
            {
              "description": "",
              "name": "application",
              "normalized_type": [
                "Option",
                "IntegrationApplication"
              ]
            },
            {
              "description": "",
              "name": "scopes",
              "normalized_type": [
                "Option",
                "Vec",
                "Scope"
              ]
            },
            {
              "description": "Only present in [`IntegrationCreateEvent`] and [`IntegrationUpdateEvent`].",
              "name": "guild_id",
              "normalized_type": [
                "Option",
                "GuildId"
              ]
            }
          ]
        }
      },
      "name": "Integration"
    },
    "IntegrationAccount": {
      "description": "Integration account object.\n\n[Discord docs](https://discord.com/developers/docs/resources/guild#integration-account-object).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "",
              "name": "id",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "",
              "name": "name",
              "normalized_type": [
                "String"
              ]
            }
          ]
        }
      },
      "name": "IntegrationAccount"
    },
    "IntegrationApplication": {
      "description": "Integration application object.\n\n[Discord docs](https://discord.com/developers/docs/resources/guild#integration-application-object).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "",
              "name": "id",
              "normalized_type": [
                "ApplicationId"
              ]
            },
            {
              "description": "",
              "name": "name",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "",
              "name": "icon",
              "normalized_type": [
                "Option",
                "ImageHash"
              ]
            },
            {
              "description": "",
              "name": "description",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "",
              "name": "bot",
              "normalized_type": [
                "Option",
                "User"
              ]
            }
          ]
        }
      },
      "name": "IntegrationApplication"
    },
    "IntegrationExpireBehaviour": {
      "description": "The behavior once the integration expires.\n\n[Discord docs](https://discord.com/developers/docs/resources/guild#integration-object-integration-expire-behaviors).",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "IntegrationExpireBehaviour"
    },
    "IntegrationId": {
      "description": "An identifier for an Integration",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "IntegrationId"
    },
    "Interaction": {
      "description": "[Discord docs](https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-object)",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "Interaction"
    },
    "InteractionId": {
      "description": "An identifier for an interaction.",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "InteractionId"
    },
    "InteractionType": {
      "description": "The type of an Interaction.\n\n[Discord docs](https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-object-interaction-type).",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "InteractionType"
    },
    "InviteTargetType": {
      "description": "Type of target for a voice channel invite.\n\n[Discord docs](https://discord.com/developers/docs/resources/invite#invite-object-invite-target-types).",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "InviteTargetType"
    },
    "Member": {
      "description": "Information about a member of a guild.\n\n[Discord docs](https://discord.com/developers/docs/resources/guild#guild-member-object),\n[extra fields](https://discord.com/developers/docs/topics/gateway-events#guild-member-add-guild-member-add-extra-fields).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "Attached User struct.",
              "name": "user",
              "normalized_type": [
                "User"
              ]
            },
            {
              "description": "The member's nickname, if present.\n\nCan't be longer than 32 characters.",
              "name": "nick",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "The guild avatar hash",
              "name": "avatar",
              "normalized_type": [
                "Option",
                "ImageHash"
              ]
            },
            {
              "description": "Vector of Ids of [`Role`]s given to the member.",
              "name": "roles",
              "normalized_type": [
                "RoleId"
              ]
            },
            {
              "description": "Timestamp representing the date when the member joined.",
              "name": "joined_at",
              "normalized_type": [
                "Option",
                "Timestamp"
              ]
            },
            {
              "description": "Timestamp representing the date since the member is boosting the guild.",
              "name": "premium_since",
              "normalized_type": [
                "Option",
                "Timestamp"
              ]
            },
            {
              "description": "Indicator of whether the member can hear in voice channels.",
              "name": "deaf",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "Indicator of whether the member can speak in voice channels.",
              "name": "mute",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "Guild member flags.",
              "name": "flags",
              "normalized_type": [
                "GuildMemberFlags"
              ]
            },
            {
              "description": "Indicator that the member hasn't accepted the rules of the guild yet.",
              "name": "pending",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "The total permissions of the member in a channel, including overrides.\n\nThis is only [`Some`] when returned in an [`Interaction`] object.\n\n[`Interaction`]: crate::model::application::Interaction",
              "name": "permissions",
              "normalized_type": [
                "Option",
                "Permissions"
              ]
            },
            {
              "description": "When the user's timeout will expire and the user will be able to communicate in the guild\nagain.\n\nWill be None or a time in the past if the user is not timed out.",
              "name": "communication_disabled_until",
              "normalized_type": [
                "Option",
                "Timestamp"
              ]
            },
            {
              "description": "The unique Id of the guild that the member is a part of.",
              "name": "guild_id",
              "normalized_type": [
                "GuildId"
              ]
            },
            {
              "description": "If the member is currently flagged for sending excessive DMs to non-friend server members\nin the last 24 hours.\n\nWill be None or a time in the past if the user is not timed out.",
              "name": "unusual_dm_activity_until",
              "normalized_type": [
                "Option",
                "Timestamp"
              ]
            }
          ]
        }
      },
      "name": "Member"
    },
    "Message": {
      "description": "A representation of a message over a guild's text channel, a group, or a private channel.\n\n[Discord docs](https://discord.com/developers/docs/resources/channel#message-object) with some\n[extra fields](https://discord.com/developers/docs/topics/gateway-events#message-create-message-create-extra-fields).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "The unique Id of the message. Can be used to calculate the creation date of the message.",
              "name": "id",
              "normalized_type": [
                "MessageId"
              ]
            },
            {
              "description": "The Id of the [`Channel`] that the message was sent to.",
              "name": "channel_id",
              "normalized_type": [
                "ChannelId"
              ]
            },
            {
              "description": "The user that sent the message.",
              "name": "author",
              "normalized_type": [
                "User"
              ]
            },
            {
              "description": "The content of the message.",
              "name": "content",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "Initial message creation timestamp, calculated from its Id.",
              "name": "timestamp",
              "normalized_type": [
                "Timestamp"
              ]
            },
            {
              "description": "The timestamp of the last time the message was updated, if it was.",
              "name": "edited_timestamp",
              "normalized_type": [
                "Option",
                "Timestamp"
              ]
            },
            {
              "description": "Indicator of whether the command is to be played back via text-to-speech.\n\nIn the client, this is done via the `/tts` slash command.",
              "name": "tts",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "Indicator of whether the message mentions everyone.",
              "name": "mention_everyone",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "Array of users mentioned in the message.",
              "name": "mentions",
              "normalized_type": [
                "User"
              ]
            },
            {
              "description": "Array of [`Role`]s' Ids mentioned in the message.",
              "name": "mention_roles",
              "normalized_type": [
                "RoleId"
              ]
            },
            {
              "description": "Channels specifically mentioned in this message.\n\n**Note**: Not all channel mentions in a message will appear in [`Self::mention_channels`].\nOnly textual channels that are visible to everyone in a lurkable guild will ever be\nincluded.\n\nA lurkable guild is one that allows users to read public channels in a server without\nactually joining the server. It also allows users to look at these channels without being\nlogged in to Discord.\n\nOnly crossposted messages (via Channel Following) currently include\n[`Self::mention_channels`] at all. If no mentions in the message meet these requirements,\nthis field will not be sent.\n\n[Refer to Discord's documentation for more information][discord-docs].\n\n[discord-docs]: https://discord.com/developers/docs/resources/channel#message-object",
              "name": "mention_channels",
              "normalized_type": [
                "ChannelMention"
              ]
            },
            {
              "description": "An vector of the files attached to a message.",
              "name": "attachments",
              "normalized_type": [
                "Attachment"
              ]
            },
            {
              "description": "Array of embeds sent with the message.",
              "name": "embeds",
              "normalized_type": [
                "Embed"
              ]
            },
            {
              "description": "Array of reactions performed on the message.",
              "name": "reactions",
              "normalized_type": [
                "MessageReaction"
              ]
            },
            {
              "description": "Non-repeating number used for ensuring message order.",
              "name": "nonce",
              "normalized_type": [
                "Option",
                "Nonce"
              ]
            },
            {
              "description": "Indicator of whether the message is pinned.",
              "name": "pinned",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "The Id of the webhook that sent this message, if one did.",
              "name": "webhook_id",
              "normalized_type": [
                "Option",
                "WebhookId"
              ]
            },
            {
              "description": "Indicator of the type of message this is, i.e. whether it is a regular message or a system\nmessage.",
              "name": "type",
              "normalized_type": [
                "MessageType"
              ]
            },
            {
              "description": "Sent with Rich Presence-related chat embeds.",
              "name": "activity",
              "normalized_type": [
                "Option",
                "MessageActivity"
              ]
            },
            {
              "description": "Sent with Rich Presence-related chat embeds.",
              "name": "application",
              "normalized_type": [
                "Option",
                "MessageApplication"
              ]
            },
            {
              "description": "If the message is an Interaction or application-owned webhook, this is the id of the\napplication.",
              "name": "application_id",
              "normalized_type": [
                "Option",
                "ApplicationId"
              ]
            },
            {
              "description": "Reference data sent with crossposted messages.",
              "name": "message_reference",
              "normalized_type": [
                "Option",
                "MessageReference"
              ]
            },
            {
              "description": "Bit flags describing extra features of the message.",
              "name": "flags",
              "normalized_type": [
                "Option",
                "MessageFlags"
              ]
            },
            {
              "description": "The message that was replied to using this message.",
              "name": "referenced_message",
              "normalized_type": [
                "Option",
                "Message"
              ]
            },
            {
              "description": "Sent if the message is a response to an [`Interaction`].\n\n[`Interaction`]: crate::model::application::Interaction",
              "name": "interaction",
              "normalized_type": [
                "Option",
                "MessageInteraction"
              ]
            },
            {
              "description": "The thread that was started from this message, includes thread member object.",
              "name": "thread",
              "normalized_type": [
                "Option",
                "GuildChannel"
              ]
            },
            {
              "description": "The components of this message",
              "name": "components",
              "normalized_type": [
                "ActionRow"
              ]
            },
            {
              "description": "Array of message sticker item objects.",
              "name": "sticker_items",
              "normalized_type": [
                "StickerItem"
              ]
            },
            {
              "description": "A generally increasing integer (there may be gaps or duplicates) that represents the\napproximate position of the message in a thread, it can be used to estimate the relative\nposition of the message in a thread in company with total_message_sent on parent thread.",
              "name": "position",
              "normalized_type": [
                "Option",
                "u64"
              ]
            },
            {
              "description": "Data of the role subscription purchase or renewal that prompted this\n[`MessageType::RoleSubscriptionPurchase`] message.",
              "name": "role_subscription_data",
              "normalized_type": [
                "Option",
                "RoleSubscriptionData"
              ]
            }
          ]
        }
      },
      "name": "Message"
    },
    "MessageActivity": {
      "description": "Rich Presence activity information.\n\n[Discord docs](https://discord.com/developers/docs/resources/channel#message-object-message-activity-structure).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "Kind of message activity.",
              "name": "type",
              "normalized_type": [
                "MessageActivityKind"
              ]
            },
            {
              "description": "`party_id` from a Rich Presence event.",
              "name": "party_id",
              "normalized_type": [
                "Option",
                "String"
              ]
            }
          ]
        }
      },
      "name": "MessageActivity"
    },
    "MessageActivityKind": {
      "description": "[Discord docs](https://discord.com/developers/docs/resources/channel#message-object-message-activity-types).",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "MessageActivityKind"
    },
    "MessageApplication": {
      "description": "Rich Presence application information.\n\n[Discord docs](https://discord.com/developers/docs/resources/application#application-object),\n[subset undocumented](https://discord.com/developers/docs/resources/channel#message-object-message-structure).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "ID of the application.",
              "name": "id",
              "normalized_type": [
                "ApplicationId"
              ]
            },
            {
              "description": "ID of the embed's image asset.",
              "name": "cover_image",
              "normalized_type": [
                "Option",
                "ImageHash"
              ]
            },
            {
              "description": "Application's description.",
              "name": "description",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "ID of the application's icon.",
              "name": "icon",
              "normalized_type": [
                "Option",
                "ImageHash"
              ]
            },
            {
              "description": "Name of the application.",
              "name": "name",
              "normalized_type": [
                "String"
              ]
            }
          ]
        }
      },
      "name": "MessageApplication"
    },
    "MessageFlags": {
      "description": "Describes extra features of the message.\n\n[Discord docs](https://discord.com/developers/docs/resources/channel#message-object-message-flags).",
      "fields": {
        "BitFlag": {
          "typ": "u64 ",
          "values": [
            {
              "description": "This message is a voice message.\n\nVoice messages have the following properties:\n- They cannot be edited.\n- Only a single audio attachment is allowed. No content, stickers, etc...\n- The [`Attachment`] has additional fields: `duration_secs` and `waveform`.\n\nAs of 2023-04-14, clients upload a 1 channel, 48000 Hz, 32kbps Opus stream in an OGG container.\nThe encoding is a Discord implementation detail and may change without warning or documentation.\n",
              "name": "CROSSPOSTED",
              "value": "1 << 0"
            },
            {
              "description": "This message is a voice message.\n\nVoice messages have the following properties:\n- They cannot be edited.\n- Only a single audio attachment is allowed. No content, stickers, etc...\n- The [`Attachment`] has additional fields: `duration_secs` and `waveform`.\n\nAs of 2023-04-14, clients upload a 1 channel, 48000 Hz, 32kbps Opus stream in an OGG container.",
              "name": "IS_CROSSPOST",
              "value": "1 << 1"
            },
            {
              "description": "This message is a voice message.\n\nVoice messages have the following properties:\n- They cannot be edited.\n- Only a single audio attachment is allowed. No content, stickers, etc...\n- The [`Attachment`] has additional fields: `duration_secs` and `waveform`.",
              "name": "SUPPRESS_EMBEDS",
              "value": "1 << 2"
            },
            {
              "description": "This message is a voice message.\n\nVoice messages have the following properties:\n- They cannot be edited.",
              "name": "SOURCE_MESSAGE_DELETED",
              "value": "1 << 3"
            },
            {
              "description": "This message is a voice message.\n",
              "name": "URGENT",
              "value": "1 << 4"
            },
            {
              "description": "",
              "name": "HAS_THREAD",
              "value": "1 << 5"
            },
            {
              "description": "",
              "name": "EPHEMERAL",
              "value": "1 << 6"
            },
            {
              "description": "",
              "name": "LOADING",
              "value": "1 << 7"
            },
            {
              "description": "",
              "name": "FAILED_TO_MENTION_SOME_ROLES_IN_THREAD",
              "value": "1 << 8"
            },
            {
              "description": "",
              "name": "SUPPRESS_NOTIFICATIONS",
              "value": "1 << 12"
            },
            {
              "description": "",
              "name": "IS_VOICE_MESSAGE",
              "value": "1 << 13"
            }
          ]
        }
      },
      "name": "MessageFlags"
    },
    "MessageId": {
      "description": "An identifier for a Message",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "MessageId"
    },
    "MessageInteraction": {
      "description": "Sent when a [`Message`] is a response to an [`Interaction`].\n\n[`Message`]: crate::model::channel::Message\n\n[Discord docs](https://discord.com/developers/docs/interactions/receiving-and-responding#message-interaction-object).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "The id of the interaction.",
              "name": "id",
              "normalized_type": [
                "InteractionId"
              ]
            },
            {
              "description": "The type of the interaction.",
              "name": "type",
              "normalized_type": [
                "InteractionType"
              ]
            },
            {
              "description": "The name of the [`Command`].\n\n[`Command`]: crate::model::application::Command",
              "name": "name",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "The user who invoked the interaction.",
              "name": "user",
              "normalized_type": [
                "User"
              ]
            },
            {
              "description": "The member who invoked the interaction in the guild.",
              "name": "member",
              "normalized_type": [
                "Option",
                "PartialMember"
              ]
            }
          ]
        }
      },
      "name": "MessageInteraction"
    },
    "MessageReaction": {
      "description": "A representation of a reaction to a message.\n\nMultiple of the same [reaction type] are sent into one [`MessageReaction`], with an associated\n[`Self::count`].\n\n[Discord docs](https://discord.com/developers/docs/resources/channel#reaction-object).\n\n[reaction type]: ReactionType",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "The amount of the type of reaction that have been sent for the associated message.",
              "name": "count",
              "normalized_type": [
                "u64"
              ]
            },
            {
              "description": "Indicator of whether the current user has sent the type of reaction.",
              "name": "me",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "The type of reaction.",
              "name": "emoji",
              "normalized_type": [
                "ReactionType"
              ]
            }
          ]
        }
      },
      "name": "MessageReaction"
    },
    "MessageReference": {
      "description": "Reference data sent with crossposted messages.\n\n[Discord docs](https://discord.com/developers/docs/resources/channel#message-reference-object-message-reference-structure).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "ID of the originating message.",
              "name": "message_id",
              "normalized_type": [
                "Option",
                "MessageId"
              ]
            },
            {
              "description": "ID of the originating message's channel.",
              "name": "channel_id",
              "normalized_type": [
                "ChannelId"
              ]
            },
            {
              "description": "ID of the originating message's guild.",
              "name": "guild_id",
              "normalized_type": [
                "Option",
                "GuildId"
              ]
            },
            {
              "description": "When sending, whether to error if the referenced message doesn't exist instead of sending\nas a normal (non-reply) message, default true.",
              "name": "fail_if_not_exists",
              "normalized_type": [
                "Option",
                "bool"
              ]
            }
          ]
        }
      },
      "name": "MessageReference"
    },
    "MessageType": {
      "description": "Differentiates between regular and different types of system messages.\n\n[Discord docs](https://discord.com/developers/docs/resources/channel#message-object-message-types).",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "MessageType"
    },
    "MfaLevel": {
      "description": "Multi-Factor Authentication level for guild moderators.\n\n[Discord docs](https://discord.com/developers/docs/resources/guild#guild-object-mfa-level).",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "MfaLevel"
    },
    "Nonce": {
      "description": "",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "Nonce"
    },
    "NsfwLevel": {
      "description": "The [`Guild`] nsfw level.\n\n[Discord docs](https://discord.com/developers/docs/resources/guild#guild-object-guild-nsfw-level).",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "NsfwLevel"
    },
    "OnlineStatus": {
      "description": "The representation of a user's status.\n\n[Discord docs](https://discord.com/developers/docs/topics/gateway-events#update-presence-status-types).",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "OnlineStatus"
    },
    "Options": {
      "description": "[Discord docs](https://discord.com/developers/docs/resources/audit-log#audit-log-entry-object-optional-audit-entry-info).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "Name of the Auto Moderation rule that was triggered.",
              "name": "auto_moderation_rule_name",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "Trigger type of the Auto Moderation rule that was triggered.",
              "name": "auto_moderation_rule_trigger_type",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "ID of the app whose permissions were targeted.",
              "name": "application_id",
              "normalized_type": [
                "Option",
                "ApplicationId"
              ]
            },
            {
              "description": "Number of days after which inactive members were kicked.",
              "name": "delete_member_days",
              "normalized_type": [
                "Option",
                "u32"
              ]
            },
            {
              "description": "Number of members removed by the prune",
              "name": "members_removed",
              "normalized_type": [
                "Option",
                "u64"
              ]
            },
            {
              "description": "Channel in which the messages were deleted",
              "name": "channel_id",
              "normalized_type": [
                "Option",
                "ChannelId"
              ]
            },
            {
              "description": "Number of deleted messages.",
              "name": "count",
              "normalized_type": [
                "Option",
                "u64"
              ]
            },
            {
              "description": "Id of the overwritten entity",
              "name": "id",
              "normalized_type": [
                "Option",
                "GenericId"
              ]
            },
            {
              "description": "Type of overwritten entity (\"member\" or \"role\").",
              "name": "kind",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "Message that was pinned or unpinned.",
              "name": "message_id",
              "normalized_type": [
                "Option",
                "MessageId"
              ]
            },
            {
              "description": "Name of the role if type is \"role\"",
              "name": "role_name",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "The status of a voice channel when set.",
              "name": "status",
              "normalized_type": [
                "Option",
                "String"
              ]
            }
          ]
        }
      },
      "name": "Options"
    },
    "PartialGuild": {
      "description": "Partial information about a [`Guild`]. This does not include information like member data.\n\n[Discord docs](https://discord.com/developers/docs/resources/guild#guild-object).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "The unique Id identifying the guild.\n\nThis is equivalent to the Id of the default role (`@everyone`).",
              "name": "id",
              "normalized_type": [
                "GuildId"
              ]
            },
            {
              "description": "The name of the guild.",
              "name": "name",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "The hash of the icon used by the guild.\n\nIn the client, this appears on the guild list on the left-hand side.",
              "name": "icon",
              "normalized_type": [
                "Option",
                "ImageHash"
              ]
            },
            {
              "description": "Icon hash, returned when in the template object",
              "name": "icon_hash",
              "normalized_type": [
                "Option",
                "ImageHash"
              ]
            },
            {
              "description": "An identifying hash of the guild's splash icon.\n\nIf the `InviteSplash` feature is enabled, this can be used to generate a URL to a splash\nimage.",
              "name": "splash",
              "normalized_type": [
                "Option",
                "ImageHash"
              ]
            },
            {
              "description": "An identifying hash of the guild discovery's splash icon.\n\n**Note**: Only present for guilds with the `DISCOVERABLE` feature.",
              "name": "discovery_splash",
              "normalized_type": [
                "Option",
                "ImageHash"
              ]
            },
            {
              "description": "The Id of the [`User`] who owns the guild.",
              "name": "owner_id",
              "normalized_type": [
                "UserId"
              ]
            },
            {
              "description": "Information about the voice afk channel.",
              "name": "afk_metadata",
              "normalized_type": [
                "Option",
                "AfkMetadata"
              ]
            },
            {
              "description": "Whether or not the guild widget is enabled.",
              "name": "widget_enabled",
              "normalized_type": [
                "Option",
                "bool"
              ]
            },
            {
              "description": "The channel id that the widget will generate an invite to, or null if set to no invite",
              "name": "widget_channel_id",
              "normalized_type": [
                "Option",
                "ChannelId"
              ]
            },
            {
              "description": "Indicator of the current verification level of the guild.",
              "name": "verification_level",
              "normalized_type": [
                "VerificationLevel"
              ]
            },
            {
              "description": "Indicator of whether notifications for all messages are enabled by\ndefault in the guild.",
              "name": "default_message_notifications",
              "normalized_type": [
                "DefaultMessageNotificationLevel"
              ]
            },
            {
              "description": "Default explicit content filter level.",
              "name": "explicit_content_filter",
              "normalized_type": [
                "ExplicitContentFilter"
              ]
            },
            {
              "description": "A mapping of the guild's roles.",
              "name": "roles",
              "normalized_type": [
                "HashMap",
                "RoleId",
                "Role"
              ]
            },
            {
              "description": "All of the guild's custom emojis.",
              "name": "emojis",
              "normalized_type": [
                "HashMap",
                "EmojiId",
                "Emoji"
              ]
            },
            {
              "description": "The guild features. More information available at [`discord documentation`].\n\nThe following is a list of known features:\n- `ANIMATED_ICON`\n- `BANNER`\n- `COMMERCE`\n- `COMMUNITY`\n- `DISCOVERABLE`\n- `FEATURABLE`\n- `INVITE_SPLASH`\n- `MEMBER_VERIFICATION_GATE_ENABLED`\n- `MONETIZATION_ENABLED`\n- `MORE_STICKERS`\n- `NEWS`\n- `PARTNERED`\n- `PREVIEW_ENABLED`\n- `PRIVATE_THREADS`\n- `ROLE_ICONS`\n- `SEVEN_DAY_THREAD_ARCHIVE`\n- `THREE_DAY_THREAD_ARCHIVE`\n- `TICKETED_EVENTS_ENABLED`\n- `VANITY_URL`\n- `VERIFIED`\n- `VIP_REGIONS`\n- `WELCOME_SCREEN_ENABLED`\n- `THREE_DAY_THREAD_ARCHIVE`\n- `SEVEN_DAY_THREAD_ARCHIVE`\n- `PRIVATE_THREADS`\n\n\n[`discord documentation`]: https://discord.com/developers/docs/resources/guild#guild-object-guild-features",
              "name": "features",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "Indicator of whether the guild requires multi-factor authentication for [`Role`]s or\n[`User`]s with moderation permissions.",
              "name": "mfa_level",
              "normalized_type": [
                "MfaLevel"
              ]
            },
            {
              "description": "Application ID of the guild creator if it is bot-created.",
              "name": "application_id",
              "normalized_type": [
                "Option",
                "ApplicationId"
              ]
            },
            {
              "description": "The ID of the channel to which system messages are sent.",
              "name": "system_channel_id",
              "normalized_type": [
                "Option",
                "ChannelId"
              ]
            },
            {
              "description": "System channel flags.",
              "name": "system_channel_flags",
              "normalized_type": [
                "SystemChannelFlags"
              ]
            },
            {
              "description": "The id of the channel where rules and/or guidelines are displayed.\n\n**Note**: Only available on `COMMUNITY` guild, see [`Self::features`].",
              "name": "rules_channel_id",
              "normalized_type": [
                "Option",
                "ChannelId"
              ]
            },
            {
              "description": "The maximum number of presences for the guild. The default value is currently 25000.\n\n**Note**: It is in effect when it is `None`.",
              "name": "max_presences",
              "normalized_type": [
                "Option",
                "u64"
              ]
            },
            {
              "description": "The maximum number of members for the guild.",
              "name": "max_members",
              "normalized_type": [
                "Option",
                "u64"
              ]
            },
            {
              "description": "The vanity url code for the guild, if it has one.",
              "name": "vanity_url_code",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "The server's description, if it has one.",
              "name": "description",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "The guild's banner, if it has one.",
              "name": "banner",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "The server's premium boosting level.",
              "name": "premium_tier",
              "normalized_type": [
                "PremiumTier"
              ]
            },
            {
              "description": "The total number of users currently boosting this server.",
              "name": "premium_subscription_count",
              "normalized_type": [
                "Option",
                "u64"
              ]
            },
            {
              "description": "The preferred locale of this guild only set if guild has the \"DISCOVERABLE\" feature,\ndefaults to en-US.",
              "name": "preferred_locale",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "The id of the channel where admins and moderators of Community guilds receive notices from\nDiscord.\n\n**Note**: Only available on `COMMUNITY` guild, see [`Self::features`].",
              "name": "public_updates_channel_id",
              "normalized_type": [
                "Option",
                "ChannelId"
              ]
            },
            {
              "description": "The maximum amount of users in a video channel.",
              "name": "max_video_channel_users",
              "normalized_type": [
                "Option",
                "u64"
              ]
            },
            {
              "description": "The maximum amount of users in a stage video channel",
              "name": "max_stage_video_channel_users",
              "normalized_type": [
                "Option",
                "u64"
              ]
            },
            {
              "description": "Approximate number of members in this guild.",
              "name": "approximate_member_count",
              "normalized_type": [
                "Option",
                "u64"
              ]
            },
            {
              "description": "Approximate number of non-offline members in this guild.",
              "name": "approximate_presence_count",
              "normalized_type": [
                "Option",
                "u64"
              ]
            },
            {
              "description": "The welcome screen of the guild.\n\n**Note**: Only available on `COMMUNITY` guild, see [`Self::features`].",
              "name": "welcome_screen",
              "normalized_type": [
                "Option",
                "GuildWelcomeScreen"
              ]
            },
            {
              "description": "The guild NSFW state. See [`discord support article`].\n\n[`discord support article`]: https://support.discord.com/hc/en-us/articles/1500005389362-NSFW-Server-Designation",
              "name": "nsfw_level",
              "normalized_type": [
                "NsfwLevel"
              ]
            },
            {
              "description": "All of the guild's custom stickers.",
              "name": "stickers",
              "normalized_type": [
                "HashMap",
                "StickerId",
                "Sticker"
              ]
            },
            {
              "description": "Whether the guild has the boost progress bar enabled",
              "name": "premium_progress_bar_enabled",
              "normalized_type": [
                "bool"
              ]
            }
          ]
        }
      },
      "name": "PartialGuild"
    },
    "PartialGuildChannel": {
      "description": "A partial guild channel.\n\n[Discord docs](https://discord.com/developers/docs/resources/channel#channel-object),\n[subset description](https://discord.com/developers/docs/topics/gateway#thread-delete)",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "The channel Id.",
              "name": "id",
              "normalized_type": [
                "ChannelId"
              ]
            },
            {
              "description": "The channel guild Id.",
              "name": "guild_id",
              "normalized_type": [
                "GuildId"
              ]
            },
            {
              "description": "The channel category Id,  or the parent text channel Id for a thread.",
              "name": "parent_id",
              "normalized_type": [
                "ChannelId"
              ]
            },
            {
              "description": "The channel type.",
              "name": "type",
              "normalized_type": [
                "ChannelType"
              ]
            }
          ]
        }
      },
      "name": "PartialGuildChannel"
    },
    "PartialMember": {
      "description": "A partial amount of data for a member.\n\nThis is used in [`Message`]s from [`Guild`]s.\n\n[Discord docs](https://discord.com/developers/docs/resources/guild#guild-member-object),\nsubset specification unknown (field type \"partial member\" is used in\n[link](https://discord.com/developers/docs/topics/gateway-events#message-create),\n[link](https://discord.com/developers/docs/resources/invite#invite-stage-instance-object),\n[link](https://discord.com/developers/docs/topics/gateway-events#message-create),\n[link](https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-object-resolved-data-structure),\n[link](https://discord.com/developers/docs/interactions/receiving-and-responding#message-interaction-object))",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "Indicator of whether the member can hear in voice channels.",
              "name": "deaf",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "Timestamp representing the date when the member joined.",
              "name": "joined_at",
              "normalized_type": [
                "Option",
                "Timestamp"
              ]
            },
            {
              "description": "Indicator of whether the member can speak in voice channels",
              "name": "mute",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "The member's nickname, if present.\n\nCan't be longer than 32 characters.",
              "name": "nick",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "Vector of Ids of [`Role`]s given to the member.",
              "name": "roles",
              "normalized_type": [
                "RoleId"
              ]
            },
            {
              "description": "Indicator that the member hasn't accepted the rules of the guild yet.",
              "name": "pending",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "Timestamp representing the date since the member is boosting the guild.",
              "name": "premium_since",
              "normalized_type": [
                "Option",
                "Timestamp"
              ]
            },
            {
              "description": "The unique Id of the guild that the member is a part of.\n\nManually inserted in [`Reaction::deserialize`].",
              "name": "guild_id",
              "normalized_type": [
                "Option",
                "GuildId"
              ]
            },
            {
              "description": "Attached User struct.",
              "name": "user",
              "normalized_type": [
                "Option",
                "User"
              ]
            },
            {
              "description": "The total permissions of the member in a channel, including overrides.\n\nThis is only [`Some`] when returned in an [`Interaction`] object.\n\n[`Interaction`]: crate::model::application::Interaction",
              "name": "permissions",
              "normalized_type": [
                "Option",
                "Permissions"
              ]
            },
            {
              "description": "If the member is currently flagged for sending excessive DMs to non-friend server members\nin the last 24 hours.\n\nWill be None or a time in the past if the user is not timed out.",
              "name": "unusual_dm_activity_until",
              "normalized_type": [
                "Option",
                "Timestamp"
              ]
            }
          ]
        }
      },
      "name": "PartialMember"
    },
    "PartialThreadMember": {
      "description": "",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "The time the current user last joined the thread.",
              "name": "join_timestamp",
              "normalized_type": [
                "Timestamp"
              ]
            },
            {
              "description": "Any user-thread settings, currently only used for notifications",
              "name": "flags",
              "normalized_type": [
                "ThreadMemberFlags"
              ]
            }
          ]
        }
      },
      "name": "PartialThreadMember"
    },
    "PermissionOverwrite": {
      "description": "A channel-specific permission overwrite for a member or role.\n\n[Discord docs](https://discord.com/developers/docs/resources/channel#overwrite-object).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "",
              "name": "allow",
              "normalized_type": [
                "Permissions"
              ]
            },
            {
              "description": "",
              "name": "deny",
              "normalized_type": [
                "Permissions"
              ]
            },
            {
              "description": "",
              "name": "kind",
              "normalized_type": [
                "PermissionOverwriteType"
              ]
            }
          ]
        }
      },
      "name": "PermissionOverwrite"
    },
    "PermissionOverwriteType": {
      "description": "The type of edit being made to a Channel's permissions.\n\nThis is for use with methods such as [`GuildChannel::create_permission`].\n\nIf you would like to modify the default permissions of a channel, you can get its [`RoleId`]\nfrom [`GuildId::everyone_role`].\n\n[Discord docs](https://discord.com/developers/docs/resources/channel#overwrite-object-overwrite-structure) (field `type`).",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "PermissionOverwriteType"
    },
    "Permissions": {
      "description": "A set of permissions that can be assigned to [`User`]s and [`Role`]s via\n[`PermissionOverwrite`]s, roles globally in a [`Guild`], and to [`GuildChannel`]s.\n\n[Discord docs](https://discord.com/developers/docs/topics/permissions#permissions-bitwise-permission-flags).\n\n[`Guild`]: super::guild::Guild\n[`GuildChannel`]: super::channel::GuildChannel\n[`PermissionOverwrite`]: super::channel::PermissionOverwrite\n[`Role`]: super::guild::Role\n[`User`]: super::user::User",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "Permissions"
    },
    "PremiumTier": {
      "description": "The guild's premium tier, depends on the amount of users boosting the guild currently\n\n[Discord docs](https://discord.com/developers/docs/resources/guild#guild-object-premium-tier).",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "PremiumTier"
    },
    "PremiumType": {
      "description": "Premium types denote the level of premium a user has. Visit the [Nitro](https://discord.com/nitro)\npage to learn more about the premium plans Discord currently offers.\n\n[Discord docs](https://discord.com/developers/docs/resources/user#user-object-premium-types).",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "PremiumType"
    },
    "Presence": {
      "description": "Information detailing the current online status of a [`User`].\n\n[Discord docs](https://discord.com/developers/docs/topics/gateway#presence-update-presence-update-event-fields).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "Data about the associated user.",
              "name": "user",
              "normalized_type": [
                "PresenceUser"
              ]
            },
            {
              "description": "The `GuildId` the presence update is coming from.",
              "name": "guild_id",
              "normalized_type": [
                "Option",
                "GuildId"
              ]
            },
            {
              "description": "The user's online status.",
              "name": "status",
              "normalized_type": [
                "OnlineStatus"
              ]
            },
            {
              "description": "[`User`]'s current activities.",
              "name": "activities",
              "normalized_type": [
                "Activity"
              ]
            },
            {
              "description": "The devices a user are currently active on, if available.",
              "name": "client_status",
              "normalized_type": [
                "Option",
                "ClientStatus"
              ]
            }
          ]
        }
      },
      "name": "Presence"
    },
    "PresenceUser": {
      "description": "Information about the user of a [`Presence`] event.\n\nFields should be identical to those of [`User`], except that every field but `id` is\noptional. This is currently not implemented fully.\n\n[Discord docs](https://discord.com/developers/docs/resources/user#user-object),\n[modification description](https://discord.com/developers/docs/topics/gateway-events#presence-update).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "",
              "name": "id",
              "normalized_type": [
                "UserId"
              ]
            },
            {
              "description": "",
              "name": "avatar",
              "normalized_type": [
                "Option",
                "ImageHash"
              ]
            },
            {
              "description": "",
              "name": "bot",
              "normalized_type": [
                "Option",
                "bool"
              ]
            },
            {
              "description": "",
              "name": "discriminator",
              "normalized_type": [
                "Option",
                "u16"
              ]
            },
            {
              "description": "",
              "name": "email",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "",
              "name": "mfa_enabled",
              "normalized_type": [
                "Option",
                "bool"
              ]
            },
            {
              "description": "",
              "name": "username",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "",
              "name": "verified",
              "normalized_type": [
                "Option",
                "bool"
              ]
            },
            {
              "description": "",
              "name": "public_flags",
              "normalized_type": [
                "Option",
                "UserPublicFlags"
              ]
            }
          ]
        }
      },
      "name": "PresenceUser"
    },
    "ReactionType": {
      "description": "The type of a [`Reaction`] sent.",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "ReactionType"
    },
    "Role": {
      "description": "Information about a role within a guild. A role represents a set of permissions, and can be\nattached to one or multiple users. A role has various miscellaneous configurations, such as\nbeing assigned a colour. Roles are unique per guild and do not cross over to other guilds in\nany way, and can have channel-specific permission overrides in addition to guild-level\npermissions.\n\n[Discord docs](https://discord.com/developers/docs/topics/permissions#role-object).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "The Id of the role. Can be used to calculate the role's creation date.",
              "name": "id",
              "normalized_type": [
                "RoleId"
              ]
            },
            {
              "description": "The Id of the Guild the Role is in.",
              "name": "guild_id",
              "normalized_type": [
                "GuildId"
              ]
            },
            {
              "description": "The colour of the role.",
              "name": "color",
              "normalized_type": [
                "Colour"
              ]
            },
            {
              "description": "Indicator of whether the role is pinned above lesser roles.\n\nIn the client, this causes [`Member`]s in the role to be seen above those in roles with a\nlower [`Self::position`].",
              "name": "hoist",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "Indicator of whether the role is managed by an integration service.",
              "name": "managed",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "Indicator of whether the role can be mentioned, similar to mentioning a specific member or\n`@everyone`.\n\nOnly members of the role will be notified if a role is mentioned with this set to `true`.",
              "name": "mentionable",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "The name of the role.",
              "name": "name",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "A set of permissions that the role has been assigned.\n\nSee the [`permissions`] module for more information.\n\n[`permissions`]: crate::model::permissions",
              "name": "permissions",
              "normalized_type": [
                "Permissions"
              ]
            },
            {
              "description": "The role's position in the position list. Roles are considered higher in hierarchy if their\nposition is higher.\n\nThe `@everyone` role is usually either `-1` or `0`.",
              "name": "position",
              "normalized_type": [
                "i16"
              ]
            },
            {
              "description": "The tags this role has. It can be used to determine if this role is a special role in this\nguild such as guild subscriber role, or if the role is linked to an [`Integration`] or a\nbot.\n\n[`Integration`]: super::Integration",
              "name": "tags",
              "normalized_type": [
                "RoleTags"
              ]
            },
            {
              "description": "Role icon image hash.",
              "name": "icon",
              "normalized_type": [
                "Option",
                "ImageHash"
              ]
            },
            {
              "description": "Role unicoded image.",
              "name": "unicode_emoji",
              "normalized_type": [
                "Option",
                "String"
              ]
            }
          ]
        }
      },
      "name": "Role"
    },
    "RoleId": {
      "description": "An identifier for a Role",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "RoleId"
    },
    "RoleSubscriptionData": {
      "description": "[Discord docs](https://discord.com/developers/docs/resources/channel#role-subscription-data-object)",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "The id of the sku and listing that the user is subscribed to.",
              "name": "role_subscription_listing_id",
              "normalized_type": [
                "SkuId"
              ]
            },
            {
              "description": "The name of the tier that the user is subscribed to.",
              "name": "tier_name",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "The cumulative number of months that the user has been subscribed for.",
              "name": "total_months_subscribed",
              "normalized_type": [
                "u16"
              ]
            },
            {
              "description": "Whether this notification is for a renewal rather than a new purchase.",
              "name": "is_renewal",
              "normalized_type": [
                "bool"
              ]
            }
          ]
        }
      },
      "name": "RoleSubscriptionData"
    },
    "RoleTags": {
      "description": "The tags of a [`Role`].\n\n[Discord docs](https://discord.com/developers/docs/topics/permissions#role-object-role-tags-structure).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "The Id of the bot the [`Role`] belongs to.",
              "name": "bot_id",
              "normalized_type": [
                "Option",
                "UserId"
              ]
            },
            {
              "description": "The Id of the integration the [`Role`] belongs to.",
              "name": "integration_id",
              "normalized_type": [
                "Option",
                "IntegrationId"
              ]
            },
            {
              "description": "Whether this is the guild's premium subscriber role.",
              "name": "premium_subscriber",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "The id of this role's subscription sku and listing.",
              "name": "subscription_listing_id",
              "normalized_type": [
                "Option",
                "SkuId"
              ]
            },
            {
              "description": "Whether this role is available for purchase.",
              "name": "available_for_purchase",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "Whether this role is a guild's linked role.",
              "name": "guild_connections",
              "normalized_type": [
                "bool"
              ]
            }
          ]
        }
      },
      "name": "RoleTags"
    },
    "Rule": {
      "description": "Configured auto moderation rule.\n\n[Discord docs](https://discord.com/developers/docs/resources/auto-moderation#auto-moderation-rule-object).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "ID of the rule.",
              "name": "id",
              "normalized_type": [
                "RuleId"
              ]
            },
            {
              "description": "ID of the guild this rule belongs to.",
              "name": "guild_id",
              "normalized_type": [
                "GuildId"
              ]
            },
            {
              "description": "Name of the rule.",
              "name": "name",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "ID of the user which created the rule.",
              "name": "creator_id",
              "normalized_type": [
                "UserId"
              ]
            },
            {
              "description": "Event context in which the rule should be checked.",
              "name": "event_type",
              "normalized_type": [
                "EventType"
              ]
            },
            {
              "description": "Characterizes the type of content which can trigger the rule.",
              "name": "trigger",
              "normalized_type": [
                "Trigger"
              ]
            },
            {
              "description": "Actions which will execute when the rule is triggered.",
              "name": "actions",
              "normalized_type": [
                "Action"
              ]
            },
            {
              "description": "Whether the rule is enabled.",
              "name": "enabled",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "Roles that should not be affected by the rule.\n\nMaximum of 20.",
              "name": "exempt_roles",
              "normalized_type": [
                "RoleId",
                "u8"
              ]
            },
            {
              "description": "Channels that should not be affected by the rule.\n\nMaximum of 50.",
              "name": "exempt_channels",
              "normalized_type": [
                "ChannelId",
                "u8"
              ]
            }
          ]
        }
      },
      "name": "Rule"
    },
    "RuleId": {
      "description": "An identifier for an auto moderation rule",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "RuleId"
    },
    "ScheduledEvent": {
      "description": "Information about a guild scheduled event.\n\n[Discord docs](https://discord.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-object).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "The Id of the scheduled event.",
              "name": "id",
              "normalized_type": [
                "ScheduledEventId"
              ]
            },
            {
              "description": "The Id of the guild that the event belongs to.",
              "name": "guild_id",
              "normalized_type": [
                "GuildId"
              ]
            },
            {
              "description": "The Id of the channel that the event belongs to, if any.",
              "name": "channel_id",
              "normalized_type": [
                "Option",
                "ChannelId"
              ]
            },
            {
              "description": "The Id of the User that created the scheduled event.\n\nOnly `None` for events created before October 25th, 2021.",
              "name": "creator_id",
              "normalized_type": [
                "Option",
                "UserId"
              ]
            },
            {
              "description": "The name of the scheduled event.",
              "name": "name",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "The description of the scheduled event, if any.",
              "name": "description",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "The event's starting time.",
              "name": "scheduled_start_time",
              "normalized_type": [
                "Timestamp"
              ]
            },
            {
              "description": "The event's ending time; optional.",
              "name": "scheduled_end_time",
              "normalized_type": [
                "Option",
                "Timestamp"
              ]
            },
            {
              "description": "The privacy level of the scheduled event.",
              "name": "privacy_level",
              "normalized_type": [
                "ScheduledEventPrivacyLevel"
              ]
            },
            {
              "description": "The event's status; either Scheduled, Active, Completed, or Canceled.",
              "name": "status",
              "normalized_type": [
                "ScheduledEventStatus"
              ]
            },
            {
              "description": "The User that created the event.\n\nOnly `None` for events created before October 25th, 2021.",
              "name": "creator",
              "normalized_type": [
                "Option",
                "User"
              ]
            },
            {
              "description": "The type of the event, indicating if it will take place in a Stage Instance, a Voice\nChannel, or at some External location.",
              "name": "entity_type",
              "normalized_type": [
                "ScheduledEventType"
              ]
            },
            {
              "description": "The id of an entity associated with a guild scheduled event.",
              "name": "entity_id",
              "normalized_type": [
                "Option",
                "GenericId"
              ]
            },
            {
              "description": "Optional event location, only required for External events.",
              "name": "entity_metadata",
              "normalized_type": [
                "Option",
                "ScheduledEventMetadata"
              ]
            },
            {
              "description": "Number of users interested in the event.\n\nOnly populated if `with_user_count` is set to true provided when calling\n[`GuildId::scheduled_event`] or [`GuildId::scheduled_events`].",
              "name": "user_count",
              "normalized_type": [
                "Option",
                "u64"
              ]
            },
            {
              "description": "The hash of the event's cover image, if present.",
              "name": "image",
              "normalized_type": [
                "Option",
                "ImageHash"
              ]
            }
          ]
        }
      },
      "name": "ScheduledEvent"
    },
    "ScheduledEventId": {
      "description": "An identifier for a Scheduled Event",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "ScheduledEventId"
    },
    "ScheduledEventMetadata": {
      "description": "[Discord docs](https://discord.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-object-guild-scheduled-event-entity-metadata).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "",
              "name": "location",
              "normalized_type": [
                "Option",
                "String"
              ]
            }
          ]
        }
      },
      "name": "ScheduledEventMetadata"
    },
    "ScheduledEventPrivacyLevel": {
      "description": "See [`ScheduledEvent::privacy_level`].\n\n[Discord docs](https://discord.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-object-guild-scheduled-event-privacy-level).",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "ScheduledEventPrivacyLevel"
    },
    "ScheduledEventStatus": {
      "description": "[Discord docs](https://discord.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-object-guild-scheduled-event-status).",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "ScheduledEventStatus"
    },
    "ScheduledEventType": {
      "description": "[Discord docs](https://discord.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-object-guild-scheduled-event-entity-types).",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "ScheduledEventType"
    },
    "Scope": {
      "description": "The available OAuth2 Scopes.\n\n[Discord docs](https://discord.com/developers/docs/topics/oauth2#shared-resources-oauth2-scopes).",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "Scope"
    },
    "SkuId": {
      "description": "An identifier for a SKU.",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "SkuId"
    },
    "SortOrder": {
      "description": "The sort order for threads in a forum.\n\n[Discord docs](https://discord.com/developers/docs/resources/channel#channel-object-sort-order-types).",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "SortOrder"
    },
    "StageInstance": {
      "description": "[Discord docs](https://discord.com/developers/docs/resources/stage-instance#stage-instance-object).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "The Id of the stage instance.",
              "name": "id",
              "normalized_type": [
                "StageInstanceId"
              ]
            },
            {
              "description": "The guild Id of the associated stage channel.",
              "name": "guild_id",
              "normalized_type": [
                "GuildId"
              ]
            },
            {
              "description": "The Id of the associated stage channel.",
              "name": "channel_id",
              "normalized_type": [
                "ChannelId"
              ]
            },
            {
              "description": "The topic of the stage instance.",
              "name": "topic",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "The privacy level of the Stage instance.",
              "name": "privacy_level",
              "normalized_type": [
                "StageInstancePrivacyLevel"
              ]
            },
            {
              "description": "Whether or not Stage Discovery is disabled (deprecated).",
              "name": "discoverable_disabled",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "The id of the scheduled event for this Stage instance.",
              "name": "guild_scheduled_event_id",
              "normalized_type": [
                "Option",
                "ScheduledEventId"
              ]
            }
          ]
        }
      },
      "name": "StageInstance"
    },
    "StageInstanceId": {
      "description": "An identifier for a stage channel instance.",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "StageInstanceId"
    },
    "StageInstancePrivacyLevel": {
      "description": "See [`StageInstance::privacy_level`].\n\n[Discord docs](https://discord.com/developers/docs/resources/stage-instance#stage-instance-object-privacy-level).",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "StageInstancePrivacyLevel"
    },
    "Sticker": {
      "description": "A sticker sent with a message.\n\n[Discord docs](https://discord.com/developers/docs/resources/sticker#sticker-object).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "The unique ID given to this sticker.",
              "name": "id",
              "normalized_type": [
                "StickerId"
              ]
            },
            {
              "description": "The unique ID of the pack the sticker is from.",
              "name": "pack_id",
              "normalized_type": [
                "Option",
                "StickerPackId"
              ]
            },
            {
              "description": "The name of the sticker.",
              "name": "name",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "Description of the sticker",
              "name": "description",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "For guild stickers, the Discord name of a unicode emoji representing the sticker's\nexpression. For standard stickers, a list of related expressions.",
              "name": "tags",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "The type of sticker.",
              "name": "type",
              "normalized_type": [
                "StickerType"
              ]
            },
            {
              "description": "The type of sticker format.",
              "name": "format_type",
              "normalized_type": [
                "StickerFormatType"
              ]
            },
            {
              "description": "Whether or not this guild sticker can be used, may be false due to loss of Server Boosts.",
              "name": "available",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "Id of the guild that owns this sticker.",
              "name": "guild_id",
              "normalized_type": [
                "Option",
                "GuildId"
              ]
            },
            {
              "description": "User that uploaded the sticker. This will be `None` if the current user does not have\neither the [Create Guild Expressions] nor the [Manage Guild Expressions] permission.\n\n[Create Guild Expressions]: Permissions::CREATE_GUILD_EXPRESSIONS\n[Manage Guild Expressions]: Permissions::MANAGE_GUILD_EXPRESSIONS",
              "name": "user",
              "normalized_type": [
                "Option",
                "User"
              ]
            },
            {
              "description": "A sticker's sort order within a pack.",
              "name": "sort_value",
              "normalized_type": [
                "Option",
                "u16"
              ]
            }
          ]
        }
      },
      "name": "Sticker"
    },
    "StickerFormatType": {
      "description": "Differentiates between sticker formats.\n\n[Discord docs](https://discord.com/developers/docs/resources/sticker#sticker-object-sticker-format-types).",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "StickerFormatType"
    },
    "StickerId": {
      "description": "An identifier for a sticker.",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "StickerId"
    },
    "StickerItem": {
      "description": "The smallest amount of data required to render a sticker.\n\n[Discord docs](https://discord.com/developers/docs/resources/sticker#sticker-item-object).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "The unique ID given to this sticker.",
              "name": "id",
              "normalized_type": [
                "StickerId"
              ]
            },
            {
              "description": "The name of the sticker.",
              "name": "name",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "The type of sticker format.",
              "name": "format_type",
              "normalized_type": [
                "StickerFormatType"
              ]
            }
          ]
        }
      },
      "name": "StickerItem"
    },
    "StickerPackId": {
      "description": "An identifier for a sticker pack.",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "StickerPackId"
    },
    "StickerType": {
      "description": "Differentiates between sticker types.\n\n[Discord docs](https://discord.com/developers/docs/resources/sticker#sticker-object-sticker-types).",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "StickerType"
    },
    "SystemChannelFlags": {
      "description": "Describes a system channel flags.\n\n[Discord docs](https://discord.com/developers/docs/resources/guild#guild-object-system-channel-flags).",
      "fields": {
        "BitFlag": {
          "typ": "u64 ",
          "values": [
            {
              "description": "Suppress role subscription purchase and renewal notifications.",
              "name": "SUPPRESS_JOIN_NOTIFICATIONS",
              "value": "1 << 0"
            },
            {
              "description": "Hide member join sticker reply buttons.",
              "name": "SUPPRESS_PREMIUM_SUBSCRIPTIONS",
              "value": "1 << 1"
            },
            {
              "description": "Suppress server setup tips.",
              "name": "SUPPRESS_GUILD_REMINDER_NOTIFICATIONS",
              "value": "1 << 2"
            },
            {
              "description": "Suppress server boost notifications.",
              "name": "SUPPRESS_JOIN_NOTIFICATION_REPLIES",
              "value": "1 << 3"
            },
            {
              "description": "Suppress member join notifications.",
              "name": "SUPPRESS_ROLE_SUBSCRIPTION_PURCHASE_NOTIFICATIONS",
              "value": "1 << 4"
            },
            {
              "description": "",
              "name": "SUPPRESS_ROLE_SUBSCRIPTION_PURCHASE_NOTIFICATION_REPLIES",
              "value": "1 << 5"
            }
          ]
        }
      },
      "name": "SystemChannelFlags"
    },
    "ThreadMember": {
      "description": "[Discord docs](https://discord.com/developers/docs/resources/channel#thread-member-object),\n[extra fields](https://discord.com/developers/docs/topics/gateway-events#thread-member-update-thread-member-update-event-extra-fields).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "",
              "name": "inner",
              "normalized_type": [
                "PartialThreadMember"
              ]
            },
            {
              "description": "The id of the thread.",
              "name": "id",
              "normalized_type": [
                "ChannelId"
              ]
            },
            {
              "description": "The id of the user.",
              "name": "user_id",
              "normalized_type": [
                "UserId"
              ]
            },
            {
              "description": "Additional information about the user.\n\nThis field is only present when `with_member` is set to `true` when calling\nList Thread Members or Get Thread Member, or inside [`ThreadMembersUpdateEvent`].",
              "name": "member",
              "normalized_type": [
                "Option",
                "Member"
              ]
            },
            {
              "description": "ID of the guild.\n\nAlways present in [`ThreadMemberUpdateEvent`], otherwise `None`.",
              "name": "guild_id",
              "normalized_type": [
                "Option",
                "GuildId"
              ]
            }
          ]
        }
      },
      "name": "ThreadMember"
    },
    "ThreadMemberFlags": {
      "description": "Describes extra features of the message.\n\nDiscord docs: flags field on [Thread Member](https://discord.com/developers/docs/resources/channel#thread-member-object).",
      "fields": {
        "BitFlag": {
          "typ": "u64 ",
          "values": [
            {
              "description": "",
              "name": "NOTIFICATIONS",
              "value": "1 << 0"
            }
          ]
        }
      },
      "name": "ThreadMemberFlags"
    },
    "ThreadMetadata": {
      "description": "A thread data.\n\n[Discord docs](https://discord.com/developers/docs/resources/channel#thread-metadata-object).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "Whether the thread is archived.",
              "name": "archived",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "Duration in minutes to automatically archive the thread after recent activity.",
              "name": "auto_archive_duration",
              "normalized_type": [
                "AutoArchiveDuration"
              ]
            },
            {
              "description": "The last time the thread's archive status was last changed; used for calculating recent\nactivity.",
              "name": "archive_timestamp",
              "normalized_type": [
                "Option",
                "Timestamp"
              ]
            },
            {
              "description": "When a thread is locked, only users with `MANAGE_THREADS` permission can unarchive it.",
              "name": "locked",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "Timestamp when the thread was created.\n\n**Note**: only populated for threads created after 2022-01-09",
              "name": "create_timestamp",
              "normalized_type": [
                "Option",
                "Timestamp"
              ]
            },
            {
              "description": "Whether non-moderators can add other non-moderators to a thread.\n\n**Note**: Only available on private threads.",
              "name": "invitable",
              "normalized_type": [
                "bool"
              ]
            }
          ]
        }
      },
      "name": "ThreadMetadata"
    },
    "Trigger": {
      "description": "Characterizes the type of content which can trigger the rule.\n\nDiscord docs:\n[type](https://discord.com/developers/docs/resources/auto-moderation#auto-moderation-rule-object-trigger-types),\n[metadata](https://discord.com/developers/docs/resources/auto-moderation#auto-moderation-rule-object-trigger-metadata)",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "Trigger"
    },
    "TriggerType": {
      "description": "Type of [`Trigger`].\n\n[Discord docs](https://discord.com/developers/docs/resources/auto-moderation#auto-moderation-rule-object-trigger-types).",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "TriggerType"
    },
    "User": {
      "description": "Information about a user.\n\n[Discord docs](https://discord.com/developers/docs/resources/user#user-object), existence of\nadditional partial member field documented [here](https://discord.com/developers/docs/topics/gateway-events#message-create).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "The unique Id of the user. Can be used to calculate the account's creation date.",
              "name": "id",
              "normalized_type": [
                "UserId"
              ]
            },
            {
              "description": "The account's username. Changing username will trigger a discriminator\nchange if the username+discriminator pair becomes non-unique. Unless the account has\nmigrated to a next generation username, which does not have a discriminant.",
              "name": "username",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "The account's discriminator to differentiate the user from others with\nthe same [`Self::name`]. The name+discriminator pair is always unique.\nIf the discriminator is not present, then this is a next generation username\nwhich is implicitly unique.",
              "name": "discriminator",
              "normalized_type": [
                "Option",
                "u16"
              ]
            },
            {
              "description": "The account's display name, if it is set.\nFor bots this is the application name.",
              "name": "global_name",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "Optional avatar hash.",
              "name": "avatar",
              "normalized_type": [
                "Option",
                "ImageHash"
              ]
            },
            {
              "description": "Indicator of whether the user is a bot.",
              "name": "bot",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "Whether the user is an Official Discord System user (part of the urgent message system).",
              "name": "system",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "Whether the user has two factor enabled on their account",
              "name": "mfa_enabled",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "Optional banner hash.\n\n**Note**: This will only be present if the user is fetched via Rest API, e.g. with\n[`crate::http::Http::get_user`].",
              "name": "banner",
              "normalized_type": [
                "Option",
                "ImageHash"
              ]
            },
            {
              "description": "The user's banner colour encoded as an integer representation of hexadecimal colour code\n\n**Note**: This will only be present if the user is fetched via Rest API, e.g. with\n[`crate::http::Http::get_user`].",
              "name": "accent_color",
              "normalized_type": [
                "Option",
                "Colour"
              ]
            },
            {
              "description": "The user's chosen language option",
              "name": "locale",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "Whether the email on this account has been verified\n\nRequires [`Scope::Email`]",
              "name": "verified",
              "normalized_type": [
                "Option",
                "bool"
              ]
            },
            {
              "description": "The user's email\n\nRequires [`Scope::Email`]",
              "name": "email",
              "normalized_type": [
                "Option",
                "String"
              ]
            },
            {
              "description": "The flags on a user's account",
              "name": "flags",
              "normalized_type": [
                "UserPublicFlags"
              ]
            },
            {
              "description": "The type of Nitro subscription on a user's account",
              "name": "premium_type",
              "normalized_type": [
                "PremiumType"
              ]
            },
            {
              "description": "The public flags on a user's account",
              "name": "public_flags",
              "normalized_type": [
                "Option",
                "UserPublicFlags"
              ]
            },
            {
              "description": "Only included in [`Message::mentions`] for messages from the gateway.\n\n[Discord docs](https://discord.com/developers/docs/topics/gateway-events#message-create-message-create-extra-fields).",
              "name": "member",
              "normalized_type": [
                "Option",
                "PartialMember"
              ]
            }
          ]
        }
      },
      "name": "User"
    },
    "UserId": {
      "description": "An identifier for a User",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "UserId"
    },
    "UserPublicFlags": {
      "description": "User's public flags\n\n[Discord docs](https://discord.com/developers/docs/resources/user#user-object-user-flags).",
      "fields": {
        "BitFlag": {
          "typ": "u32 ",
          "values": [
            {
              "description": "User's flag for suspected spam activity.",
              "name": "DISCORD_EMPLOYEE",
              "value": "1 << 0"
            },
            {
              "description": "",
              "name": "PARTNERED_SERVER_OWNER",
              "value": "1 << 1"
            },
            {
              "description": "",
              "name": "HYPESQUAD_EVENTS",
              "value": "1 << 2"
            },
            {
              "description": "",
              "name": "BUG_HUNTER_LEVEL_1",
              "value": "1 << 3"
            },
            {
              "description": "",
              "name": "HOUSE_BRAVERY",
              "value": "1 << 6"
            },
            {
              "description": "",
              "name": "HOUSE_BRILLIANCE",
              "value": "1 << 7"
            },
            {
              "description": "",
              "name": "HOUSE_BALANCE",
              "value": "1 << 8"
            },
            {
              "description": "",
              "name": "EARLY_SUPPORTER",
              "value": "1 << 9"
            },
            {
              "description": "",
              "name": "TEAM_USER",
              "value": "1 << 10"
            },
            {
              "description": "",
              "name": "SYSTEM",
              "value": "1 << 12"
            },
            {
              "description": "",
              "name": "BUG_HUNTER_LEVEL_2",
              "value": "1 << 14"
            },
            {
              "description": "",
              "name": "VERIFIED_BOT",
              "value": "1 << 16"
            },
            {
              "description": "",
              "name": "EARLY_VERIFIED_BOT_DEVELOPER",
              "value": "1 << 17"
            },
            {
              "description": "",
              "name": "DISCORD_CERTIFIED_MODERATOR",
              "value": "1 << 18"
            },
            {
              "description": "",
              "name": "BOT_HTTP_INTERACTIONS",
              "value": "1 << 19"
            },
            {
              "description": "User's flag as discord employee",
              "name": "SPAMMER",
              "value": "1 << 20"
            },
            {
              "description": "",
              "name": "ACTIVE_DEVELOPER",
              "value": "1 << 22"
            }
          ]
        }
      },
      "name": "UserPublicFlags"
    },
    "VerificationLevel": {
      "description": "The level to set as criteria prior to a user being able to send\nmessages in a [`Guild`].\n\n[Discord docs](https://discord.com/developers/docs/resources/guild#guild-object-verification-level).",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "VerificationLevel"
    },
    "VideoQualityMode": {
      "description": "The video quality mode for a voice channel.\n\n[Discord docs](https://discord.com/developers/docs/resources/channel#channel-object-video-quality-modes).",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "VideoQualityMode"
    },
    "VoiceState": {
      "description": "A user's state within a voice channel.\n\n[Discord docs](https://discord.com/developers/docs/resources/voice#voice-state-object).",
      "fields": {
        "StructFields": {
          "fields": [
            {
              "description": "",
              "name": "channel_id",
              "normalized_type": [
                "Option",
                "ChannelId"
              ]
            },
            {
              "description": "",
              "name": "deaf",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "",
              "name": "guild_id",
              "normalized_type": [
                "Option",
                "GuildId"
              ]
            },
            {
              "description": "",
              "name": "member",
              "normalized_type": [
                "Option",
                "Member"
              ]
            },
            {
              "description": "",
              "name": "mute",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "",
              "name": "self_deaf",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "",
              "name": "self_mute",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "",
              "name": "self_stream",
              "normalized_type": [
                "Option",
                "bool"
              ]
            },
            {
              "description": "",
              "name": "self_video",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "",
              "name": "session_id",
              "normalized_type": [
                "String"
              ]
            },
            {
              "description": "",
              "name": "suppress",
              "normalized_type": [
                "bool"
              ]
            },
            {
              "description": "",
              "name": "user_id",
              "normalized_type": [
                "UserId"
              ]
            },
            {
              "description": "When unsuppressed, non-bot users will have this set to the current time. Bot users will be\nset to [`None`]. When suppressed, the user will have their\n[`Self::request_to_speak_timestamp`] removed.",
              "name": "request_to_speak_timestamp",
              "normalized_type": [
                "Option",
                "Timestamp"
              ]
            }
          ]
        }
      },
      "name": "VoiceState"
    },
    "WebhookId": {
      "description": "An identifier for a [`Webhook`][super::webhook::Webhook]",
      "fields": {
        "EnumVariants": {
          "variants": []
        }
      },
      "name": "WebhookId"
    }
  }
}